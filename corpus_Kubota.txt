<SOS>print("Hello World")<tab>"Hello World"を出力する<EOS>
<SOS>x = int(input())<tab>入力された文字列の整数値をxとする<EOS>
<SOS>print(x**3)<tab>xの3乗を出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>print(n * 32)<tab>nに32を掛けた値を出力する<EOS>
<SOS>x = int(input())<tab>入力された文字列の整数値をxとする<EOS>
<SOS>print(int((x-30) / 2))<tab>{{({{xから30を引いた値}})の組を2で割った値}}の整数値を出力する<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>print(a+b+c)<tab>{{aにbを加えた値}}にcを加えた値を出力する<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(a*b, (a+b)*2)<tab>aにbを掛けた値と({{aにbを加えた値}})の組に2を掛けた値を出力する<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>print("a > b")<tab>"a > b"を出力する<EOS>
<SOS>print("a < b")<tab>"a < b"を出力する<EOS>
<SOS>a, b = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(int((a+b)/2))<tab>{{({{aにbを加えた値}})の組を2で割った値}}の整数値を出力する<EOS>
<SOS>a, b = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>if b > a  :<tab>bがaより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>print(a - b)<tab>aからbを引いた値を出力する<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>if c == 1  :<tab>cが1のとき、<EOS>
<SOS>print("Open")<tab>"Open"を出力する<EOS>
<SOS>print("Open")<tab>"Open"を出力する<EOS>
<SOS>time = int(input())<tab>入力された文字列の整数値をtimeとする<EOS>
<SOS>H = time//3600<tab>timeを3600で割った商をHとする<EOS>
<SOS>M = time%3600<tab>timeを3600で割った余りをMとする<EOS>
<SOS>S = M%60<tab>Mを60で割った余りをSとする<EOS>
<SOS>M = M//60<tab>Mを60で割った商をMとする<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>d = int(a / b)<tab>aをbで割った値の整数値をdとする<EOS>
<SOS>e = a % b<tab>aをbで割った余りをeとする<EOS>
<SOS>f = a / b<tab>aをbで割った値をfとする<EOS>
<SOS>print("{0} {1} {2:.5f}".format(d, e, f))<tab>format(d,e,f)を出力する<EOS>
<SOS>pi = 3.141592653589<tab>3.141592653589をpiとする<EOS>
<SOS>r = float(input())<tab>入力された文字列の浮動小数点数値をrとする<EOS>
<SOS>a = r * r * pi<tab>rにrを掛けた値にpiを掛けた値をaとする<EOS>
<SOS>b = r * 2 * pi<tab>rに2を掛けた値にpiを掛けた値をbとする<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(a * b / 3.305785)<tab>{{aにbを掛けた値}}を3.305785で割った値を出力する<EOS>
<SOS>a, b,c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>if b > c  :<tab>bがcより大きいとき、<EOS>
<SOS>b, c = c, b<tab>bとcを入れ替える<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>print(a, b, c)<tab>a、b、cを出力する<EOS>
<SOS>e1, e2, e3, e4  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にe1、e2、e3、e4とする<EOS>
<SOS>if e1 == e2 and e3 == e4 or e1 == e3 and e2 == e4 or e1 == e4 and e2 == e3  :<tab>{{e1がe2}}、かつ{{e3がe4かどうか}}、または{{e1がe3}}、かつ{{e2がe4かどうか}}、または{{e1がe4}}、かつ{{e2がe3かどうか}}のとき、<EOS>
<SOS>print("yes")<tab>"yes"を出力する<EOS>
<SOS>N, A, B, C, D  = map(int, input().split())[#Document [# '# setX']]<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にN、A、B、C、Dとする<EOS>
<SOS>if N % A == 0  :<tab>NをAで割った余りが0のとき、<EOS>
<SOS>X = N // A * B<tab>NをAで割った商にBを掛けた値をXとする<EOS>
<SOS>if N % C == 0  :<tab>NをCで割った余りが0のとき、<EOS>
<SOS>Y = N // C * D<tab>NをCで割った商にDを掛けた値をYとする<EOS>
<SOS>print(min(X, Y))<tab>XとYの最小値を出力する<EOS>
<SOS>A, B, C  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にA、B、Cとする<EOS>
<SOS>coin = 0<tab>0をcoinとする<EOS>
<SOS>day = 1<tab>1をdayとする<EOS>
<SOS>while coin < C  :<tab>coinがCより小さい間、繰り返す<EOS>
<SOS>if day % 7 == 0  :<tab>dayを7で割った余りが0のとき、<EOS>
<SOS>print(day-1)<tab>dayから1を引いた値を出力する<EOS>
<SOS>n = 1000<tab>1000をnとする<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while i < n  :<tab>iがnより小さい間、繰り返す<EOS>
<SOS>print("Hello World")<tab>"Hello World"を出力する<EOS>
<SOS>i = i + 1<tab>iに1を加えた値をiとする<EOS>
<SOS>if t == 1  :<tab>tが1のとき、<EOS>
<SOS>return 6000<tab>6000を関数出力とする<EOS>
<SOS>return 4000<tab>4000を関数出力とする<EOS>
<SOS>return 3000<tab>3000を関数出力とする<EOS>
<SOS>return 2000<tab>2000を関数出力とする<EOS>
<SOS>t1, n1  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt1とn1とする<EOS>
<SOS>t2, n2  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt2とn2とする<EOS>
<SOS>t3, n3  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt3とn3とする<EOS>
<SOS>t4, n4  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt4とn4とする<EOS>
<SOS>print(change(t1) * n1)<tab>change(t1)にn1を掛けた値を出力する<EOS>
<SOS>print(change(t2) * n2)<tab>change(t2)にn2を掛けた値を出力する<EOS>
<SOS>print(change(t3) * n3)<tab>change(t3)にn3を掛けた値を出力する<EOS>
<SOS>print(change(t4) * n4)<tab>change(t4)にn4を掛けた値を出力する<EOS>
<SOS>for i  in range(7)  :<tab>0から7未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>hi, low  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にhiとlowとする<EOS>
<SOS>print(hi - low)<tab>hiからlowを引いた値を出力する<EOS>
<SOS>for i  in range(9)  :<tab>0から9未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>name, a, b  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にname、a、bとする<EOS>
<SOS>print(name, int(a)+int(b), 200*int(a)+300*int(b))<tab>name、aの整数値にbの整数値を加えた値、{{200にaの整数値を掛けた値}}に{{300にbの整数値を掛けた値}}を加えた値を出力する<EOS>
<SOS>sum = 0<tab>0をsumとする<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(sum)<tab>sumを出力する<EOS>
<SOS>i = 1<tab>1をiとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>x = int(input())<tab>入力された文字列の整数値をxとする<EOS>
<SOS>if x == 0  :<tab>xが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>i = i + 1<tab>iに1を加えた値をiとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>if a == 0 and b == 0  :<tab>aが0、かつbが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>print(a, b)<tab>aとbを出力する<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>for i  in range(N)  :<tab>0からN未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>if a**2 == b**2 + c**2 or b**2 == c**2 + a**2 or c**2 == a**2 + b**2  :<tab>{{aの2乗が{{bの2乗にcの2乗を加えた値}}}}、または{{bの2乗が{{cの2乗にaの2乗を加えた値}}かどうか}}、またはcの2乗が{{aの2乗にbの2乗を加えた値}}のとき、<EOS>
<SOS>print("YES")<tab>"YES"を出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>S = 100000<tab>100000をSとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if S % 1000 != 0  :<tab>Sを1000で割った余りが0と等しくないとき、<EOS>
<SOS>S = (int(S / 1000) + 1) * 1000<tab>({{{{Sを1000で割った値}}の整数値に1を加えた値}})の組に1000を掛けた値をSとする<EOS>
<SOS>print(S)<tab>Sを出力する<EOS>
<SOS>for i  in range(1, 10)  :<tab>1から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(1, 10)  :<tab>1から10未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>H, W  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にHとWとする<EOS>
<SOS>if H == 0 and W == 0  :<tab>Hが0、かつWが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>for h  in range(H)  :<tab>0からH未満までの数列の各要素を順にhとして、繰り返す<EOS>
<SOS>for w  in range(W)  :<tab>0からW未満までの数列の各要素を順にwとして、繰り返す<EOS>
<SOS>if (h + w) % 2 == 0  :<tab>({{hにwを加えた値}})の組を2で割った余りが0のとき、<EOS>
<SOS>print("#", end="")<tab>"#"と((end, ""))からなる辞書を出力する<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>a, op, b  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にa、op、bとする<EOS>
<SOS>a = int(a)<tab>aの整数値をaとする<EOS>
<SOS>b = int(b)<tab>bの整数値をbとする<EOS>
<SOS>if op == "?"  :<tab>opが"?"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(a + b)<tab>aにbを加えた値を出力する<EOS>
<SOS>print(a - b)<tab>aからbを引いた値を出力する<EOS>
<SOS>print(int(a / b))<tab>{{aをbで割った値}}の整数値を出力する<EOS>
<SOS>print(a * b)<tab>aにbを掛けた値を出力する<EOS>
<SOS>n = input()<tab>入力された文字列をnとする<EOS>
<SOS>l = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをlとする<EOS>
<SOS>print(min(l), max(l), sum(l))<tab>lの最小値、lの最大値、lの総和を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>if N == 0  :<tab>Nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>data = list(int(input()) for i in range(N))<tab>{{0からN未満までの数列}}の各要素をiとし、入力された文字列の整数値の列のリストをdataとする<EOS>
<SOS>del data[0]<tab>dataの最初値を削除する<EOS>
<SOS>del data[-1]<tab>dataの末尾値を削除する<EOS>
<SOS>data_ave = sum(data)/len(data)<tab>dataの総和をdataの長さで割った値をdata_aveとする<EOS>
<SOS>print(int(data_ave))<tab>data_aveの整数値を出力する<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>return 1<tab>1を関数出力とする<EOS>
<SOS>return 1<tab>1を関数出力とする<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>print(Fib(N))<tab>Fib(N)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>return<tab>関数処理を中断する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>print(0, 0.00000000)<tab>0と0.00000000を出力する<EOS>
<SOS>print(100.00000000, 0.00000000)<tab>100.00000000と0.00000000を出力する<EOS>
<SOS>sum = 0<tab>0をsumとする<EOS>
<SOS>for i  in range(5)  :<tab>0から5未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>score = int(input())<tab>入力された文字列の整数値をscoreとする<EOS>
<SOS>if score < 40  :<tab>scoreが40より小さいとき、<EOS>
<SOS>score = 40<tab>40をscoreとする<EOS>
<SOS>print(sum//5)<tab>sumを5で割った商を出力する<EOS>
<SOS>list_a = []<tab>空列をlist_aとする<EOS>
<SOS>list_b = []<tab>空列をlist_bとする<EOS>
<SOS>for x  in range(4)  :<tab>0から4未満までの数列の各要素を順にxとして、繰り返す<EOS>
<SOS>for x  in range(2)  :<tab>0から2未満までの数列の各要素を順にxとして、繰り返す<EOS>
<SOS>print(sum(list_a[0:3]) + list_b[0])<tab>{{list_aの位置0から位置3までの部分}}の総和にlist_bの最初値を加えた値を出力する<EOS>
<SOS>list_W = []<tab>空列をlist_Wとする<EOS>
<SOS>list_K = []<tab>空列をlist_Kとする<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>sum_W = sum(list_W[0:3])<tab>list_Wの位置0から位置3までの部分の総和をsum_Wとする<EOS>
<SOS>sum_K = sum(list_K[0:3])<tab>list_Kの位置0から位置3までの部分の総和をsum_Kとする<EOS>
<SOS>print(sum_W, sum_K)<tab>sum_Wとsum_Kを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>A = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをAとする<EOS>
<SOS>m = min(A)<tab>Aの最小値をmとする<EOS>
<SOS>M = max(A)<tab>Aの最大値をMとする<EOS>
<SOS>print(math.ceil((m + M) / 2) - m)<tab>math.ceil((m + M) / 2) からmを引いた値を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>if m == 0 and n == 0  :<tab>mが0、かつnが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>List = []<tab>空列をListとする<EOS>
<SOS>max_ans = 0<tab>0をmax_ansとする<EOS>
<SOS>sum_ans = 0<tab>0をsum_ansとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i < m  :<tab>iがmより小さいとき、<EOS>
<SOS>if i >= m - 1 and max_ans < sum_ans  :<tab>iが{{mから1を引いた値}}以上、かつmax_ansがsum_ansより小さいとき、<EOS>
<SOS>max_ans = sum_ans<tab>sum_ansをmax_ansとする<EOS>
<SOS>print(max_ans)<tab>max_ansを出力する<EOS>
<SOS>LIST = []<tab>空列をLISTとする<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(LIST[0])<tab>LISTの最初値を出力する<EOS>
<SOS>print(LIST[1])<tab>LIST(1)を出力する<EOS>
<SOS>print(LIST[2])<tab>LIST(2)を出力する<EOS>
<SOS>str_org = str(input())<tab>入力された文字列の文字列をstr_orgとする<EOS>
<SOS>print(str_org.upper())<tab>str_orgを英大文字に変換した文字列を出力する<EOS>
<SOS>str = input()<tab>入力された文字列をstrとする<EOS>
<SOS>print(str.swapcase())<tab>strの英大文字を英小文字、英小文字を英大文字に変換した文字列を出力する<EOS>
<SOS>count_char = list(0 for i in range(26))<tab>{{0から26未満までの数列}}の各要素をiとし、0の列のリストをcount_charとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>for i  in range(97, 123)  :<tab>97から123未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(chr(i), ":", count_char[i-97])<tab>文字コードiの文字、":"、count_char({{iから97を引いた値}})を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>num = input()<tab>入力された文字列をnumとする<EOS>
<SOS>if num == '0'  :<tab>numが'0'のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>num_lst = [int(i) for i in num]<tab>numの各要素をiとし、iの整数値の列をnum_lstとする<EOS>
<SOS>print(sum(num_lst))<tab>num_lstの総和を出力する<EOS>
<SOS>a = list(input())<tab>入力された文字列のリストをaとする<EOS>
<SOS>count_K = a.count("K")<tab>a内の"K"の出現をカウントした整数をcount_Kとする<EOS>
<SOS>count_P = a.count("P")<tab>a内の"P"の出現をカウントした整数をcount_Pとする<EOS>
<SOS>count_U = a.count("U")<tab>a内の"U"の出現をカウントした整数をcount_Uとする<EOS>
<SOS>count_C = a.count("C")<tab>a内の"C"の出現をカウントした整数をcount_Cとする<EOS>
<SOS>print(min(count_K, count_P, count_U, count_C))<tab>count_K、count_P、count_U、count_Cの最小値を出力する<EOS>
<SOS>W = input()<tab>入力された文字列をWとする<EOS>
<SOS>n = 0<tab>0をnとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>T = input()<tab>入力された文字列をTとする<EOS>
<SOS>if T== "END_OF_TEXT"  :<tab>Tが"END_OF_TEXT"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>small_T = list(T.split())<tab>Tを空白で分割した列のリストをsmall_Tとする<EOS>
<SOS>for i  in range(len(small_T))  :<tab>0からsmall_Tの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if str.lower(small_T[i]) == str.lower(W)  :<tab>strとsmall_T(i)を英小文字に変換した文字列がstrとWを英小文字に変換した文字列のとき、<EOS>
<SOS>print(n)<tab>nを出力する<EOS>
<SOS>s = list(input())<tab>入力された文字列のリストをsとする<EOS>
<SOS>p = list(input())<tab>入力された文字列のリストをpとする<EOS>
<SOS>for x  in range(len(p))  :<tab>0からpの長さ未満までの数列の各要素を順にxとして、繰り返す<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if p[j] == s[i]  :<tab>p(j)がs(i)のとき、<EOS>
<SOS>if j == len(p)  :<tab>jがpの長さのとき、<EOS>
<SOS>print("Yes")<tab>"Yes"を出力する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if i == len(s)  :<tab>iがsの長さのとき、<EOS>
<SOS>print("No")<tab>"No"を出力する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>a = list(input())<tab>入力された文字列のリストをaとする<EOS>
<SOS>b = list(input())<tab>入力された文字列のリストをbとする<EOS>
<SOS>for j  in range(len(a)+1-len(b))  :<tab>0から{{aの長さに1を加えた値}}からbの長さを引いた値未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>Same = True<tab>真をSameとする<EOS>
<SOS>ans = j<tab>jをansとする<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while i < len(b)  :<tab>iがbの長さより小さい間、繰り返す<EOS>
<SOS>if b[i] == a[j]  :<tab>b(i)がa(j)のとき、<EOS>
<SOS>if Same == True  :<tab>Sameが真のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>Taro_ten = 0<tab>0をTaro_tenとする<EOS>
<SOS>Hanako_ten = 0<tab>0をHanako_tenとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a, b  = list(input().split())<tab>入力された文字列を空白で分割した列のリストを展開し順にaとbとする<EOS>
<SOS>Taro = list(a)<tab>aのリストをTaroとする<EOS>
<SOS>Hanako = list(b)<tab>bのリストをHanakoとする<EOS>
<SOS>length = min(len(Taro), len(Hanako))<tab>Taroの長さとHanakoの長さの最小値をlengthとする<EOS>
<SOS>for i  in range(length)  :<tab>0からlength未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if ord(Taro[i]) > ord(Hanako[i])  :<tab>Taro(i)の順序数がHanako(i)の順序数より大きいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if i == length -1  :<tab>iがlengthから1を引いた値のとき、<EOS>
<SOS>if len(Taro) > length  :<tab>Taroの長さがlengthより大きいとき、<EOS>
<SOS>print(Taro_ten, Hanako_ten)<tab>Taro_tenとHanako_tenを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>score = input()<tab>入力された文字列をscoreとする<EOS>
<SOS>if score == "0"  :<tab>scoreが"0"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>score_a = score.count("A")<tab>score内の"A"の出現をカウントした整数をscore_aとする<EOS>
<SOS>score_b = score.count("B")<tab>score内の"B"の出現をカウントした整数をscore_bとする<EOS>
<SOS>if score[0] == "A"  :<tab>score(0)が"A"のとき、<EOS>
<SOS>if score_a > score_b  :<tab>score_aがscore_bより大きいとき、<EOS>
<SOS>print(score_a, score_b)<tab>score_aとscore_bを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>x1, y1, x2, y2  = map(float, input().split())<tab>map(float,入力された文字列を空白で分割した列)を展開し順にx1、y1、x2、y2とする<EOS>
<SOS>dist = math.sqrt((x1-x2) ** 2 + (y1-y2) ** 2)<tab>math.sqrt((x1-x2) ** 2 + (y1-y2) ** 2)をdistとする<EOS>
<SOS>print("{:.5f}".format(dist))<tab>format(dist)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>a, b, C  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、Cとする<EOS>
<SOS>S = a * b * math.sin(math.pi * C / 180) / 2<tab>{{aにbを掛けた値}}にmath.sin(math.pi * C / 180) を掛けた値を2で割った値をSとする<EOS>
<SOS>c = math.sqrt(a**2 + b**2 - 2 * a * b * math.cos(math.pi * C / 180))<tab>math.sqrt(a**2 + b**2 - 2 * a * b * math.cos(math.pi * C / 180))をcとする<EOS>
<SOS>L = a + b + c<tab>aにbを加えた値にcを加えた値をLとする<EOS>
<SOS>h = 2 * S / a<tab>2にSを掛けた値をaで割った値をhとする<EOS>
<SOS>print('{:.4f}'.format(S))<tab>format(S)を出力する<EOS>
<SOS>print('{:.4f}'.format(L))<tab>format(L)を出力する<EOS>
<SOS>print('{:.4f}'.format(h))<tab>format(h)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>s = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをsとする<EOS>
<SOS>m = sum(s) / len(s)<tab>sの総和をsの長さで割った値をmとする<EOS>
<SOS>a = 0<tab>0をaとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a = math.sqrt(a)<tab>math.sqrt(a)をaとする<EOS>
<SOS>print(a)<tab>aを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>m, f, r  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にm、f、rとする<EOS>
<SOS>if m == -1 and f == -1 and r == -1  :<tab>{{mが-1}}、かつ{{fが-1かどうか}}、かつrが-1のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if m == -1 or f == -1  :<tab>mが-1、またはfが-1のとき、<EOS>
<SOS>print("F")<tab>"F"を出力する<EOS>
<SOS>print("A")<tab>"A"を出力する<EOS>
<SOS>print("B")<tab>"B"を出力する<EOS>
<SOS>print("C")<tab>"C"を出力する<EOS>
<SOS>print("C")<tab>"C"を出力する<EOS>
<SOS>print("D")<tab>"D"を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>if n == 0 and m == 0  :<tab>nが0、かつmが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(1, n-1)  :<tab>1からnから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(i+1, n)  :<tab>iに1を加えた値からn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>for k  in range(j+1, n+1)  :<tab>jに1を加えた値からnに1を加えた値未満までの数列の各要素を順にkとして、繰り返す<EOS>
<SOS>if i + j + k == m  :<tab>{{iにjを加えた値}}にkを加えた値がmのとき、<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>card = [[False for i in range(13)] for j in range(4)]<tab>{{0から4未満までの数列}}の各要素をjとし、{{{{0から13未満までの数列}}の各要素をiとし、偽の列}}の列をcardとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>mark, suit  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にmarkとsuitとする<EOS>
<SOS>if mark == "S"  :<tab>markが"S"のとき、<EOS>
<SOS>mark_num = 0<tab>0をmark_numとする<EOS>
<SOS>mark_num = 1<tab>1をmark_numとする<EOS>
<SOS>mark_num = 2<tab>2をmark_numとする<EOS>
<SOS>mark_num = 3<tab>3をmark_numとする<EOS>
<SOS>card[mark_num][int(suit)-1]  = True<tab>真をcard[mark_num][int(suit)-1] にする<EOS>
<SOS>for j  in range(4)  :<tab>0から4未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>for i  in range(13)  :<tab>0から13未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if card[j][i] == False  :<tab>card(j)(i)が偽のとき、<EOS>
<SOS>if j == 0  :<tab>jが0のとき、<EOS>
<SOS>print("S", i+1)<tab>"S"とiに1を加えた値を出力する<EOS>
<SOS>print("H", i+1)<tab>"H"とiに1を加えた値を出力する<EOS>
<SOS>print("C", i+1)<tab>"C"とiに1を加えた値を出力する<EOS>
<SOS>print("D", i+1)<tab>"D"とiに1を加えた値を出力する<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>B = [list(map(int, input().split())) for i in range(n)]<tab>{{0からn未満までの数列}}の各要素をiとし、map(整数,{{input()を空白で分割した列}})のリストの列をBとする<EOS>
<SOS>A = [int(input()) for i in range(m)]<tab>{{0からm未満までの数列}}の各要素をiとし、入力された文字列の整数値の列をAとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for j  in range(m)  :<tab>0からm未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>n, m, l  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にn、m、lとする<EOS>
<SOS>A = [list(map(int, input().split())) for i in range(n)]<tab>{{0からn未満までの数列}}の各要素をiとし、map(整数,{{input()を空白で分割した列}})のリストの列をAとする<EOS>
<SOS>B = [list(map(int, input().split())) for i in range(m)]<tab>{{0からm未満までの数列}}の各要素をiとし、map(整数,{{input()を空白で分割した列}})のリストの列をBとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(l)  :<tab>0からl未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for k  in range(m)  :<tab>0からm未満までの数列の各要素を順にkとして、繰り返す<EOS>
<SOS>if j == l-1  :<tab>jがlから1を引いた値のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>L = []<tab>空列をLとする<EOS>
<SOS>temp = n<tab>nをtempとする<EOS>
<SOS>print(n,end="")<tab>nと((end, ""))からなる辞書を出力する<EOS>
<SOS>print(":",end="")<tab>":"と((end, ""))からなる辞書を出力する<EOS>
<SOS>for i  in range(2, int(n**(1/2)//1)+1) :<tab>2から{{nの(1/2)乗を1で割った商}}の整数値に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if temp%i==0 :<tab>tempをiで割った余りが0のとき、<EOS>
<SOS>c = 0<tab>0をcとする<EOS>
<SOS>while temp%i==0 :<tab>tempをiで割った余りが0の間、繰り返す<EOS>
<SOS>for j  in range(c) :<tab>0からc未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print("",i,end="")<tab>""、i、((end, ""))からなる辞書を出力する<EOS>
<SOS>if temp!=1 :<tab>tempが1と等しくないとき、<EOS>
<SOS>print("",temp, end="")<tab>""、temp、((end, ""))からなる辞書を出力する<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>factorization(n)<tab>factorization(n)<EOS>
<SOS>mod = 1000000007<tab>1000000007をmodとする<EOS>
<SOS>return (x % mod)<tab>(xをmodで割った余り)の組を関数出力とする<EOS>
<SOS>if b == 1  :<tab>bが1のとき、<EOS>
<SOS>return a<tab>aを関数出力とする<EOS>
<SOS>a_2 = S(a**2)<tab>S(aの2乗)をa_2とする<EOS>
<SOS>b_2 = b // 2<tab>bを2で割った商をb_2とする<EOS>
<SOS>return S(A(a_2, b_2, mod))<tab>S(A(a_2,b_2,mod))を関数出力とする<EOS>
<SOS>mod = 1000000007<tab>1000000007をmodとする<EOS>
<SOS>m, n  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にmとnとする<EOS>
<SOS>print(A(m, n, mod))<tab>A(m,n,mod)を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>x, y  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にxとyとする<EOS>
<SOS>if x == 0 and y == 0  :<tab>xが0、かつyが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if y == 0  :<tab>yが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if x < y  :<tab>xがyより小さいとき、<EOS>
<SOS>x, y = y, x<tab>xとyを入れ替える<EOS>
<SOS>x = x % y<tab>xをyで割った余りをxとする<EOS>
<SOS>x, y = y, x<tab>xとyを入れ替える<EOS>
<SOS>print(x, ans)<tab>xとansを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if a < b  :<tab>aがbより小さいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>amari = a % b<tab>aをbで割った余りをamariとする<EOS>
<SOS>if amari == 0  :<tab>amariが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>return (b)<tab>(b)の組を関数出力とする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>c = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをcとする<EOS>
<SOS>for i  in range(n-1, 0, -1)  :<tab>nから1を引いた値から0未満までの-1間隔の数列の各要素を順にiとして、繰り返す<EOS>
<SOS>c[i-1]  = int(c[i] * c[i-1] / gcd(c[i], c[i-1]))<tab>{{c(i)にc({{iから1を引いた値}})を掛けた値}}をgcd(c(i),c({{iから1を引いた値}}))で割った値の整数値をc[i-1] にする<EOS>
<SOS>print(c[0])<tab>cの最初値を出力する<EOS>
<SOS>N, M  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にNとMとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if N < M  :<tab>NがMより小さいとき、<EOS>
<SOS>N, M = M, N<tab>NとMを入れ替える<EOS>
<SOS>amari = N % M<tab>NをMで割った余りをamariとする<EOS>
<SOS>if amari == 0  :<tab>amariが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(M)<tab>Mを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>for i  in range(2, int(math.sqrt(N))+1)  :<tab>2からmath.sqrt(N)の整数値に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if N % i == 0  :<tab>Nをiで割った余りが0のとき、<EOS>
<SOS>return 'F'<tab>'F'を関数出力とする<EOS>
<SOS>return 'T'<tab>'T'を関数出力とする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for j  in range(n)  :<tab>0からn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>a = int(input())<tab>入力された文字列の整数値をaとする<EOS>
<SOS>if Sosu(a) == 'T'  :<tab>Sosu(a)が'T'のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>for i  in range(3, int(math.sqrt(n))+1, 2)  :<tab>3からmath.sqrt(n)の整数値に1を加えた値未満までの2間隔の数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if n % i == 0  :<tab>nをiで割った余りが0のとき、<EOS>
<SOS>return False<tab>偽を関数出力とする<EOS>
<SOS>return True<tab>真を関数出力とする<EOS>
<SOS>S = [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4]<tab>(0、0、1、2、2、3、3、4、4、4、4)からなる列をSとする<EOS>
<SOS>for i  in range(11, 1000000)  :<tab>11から1000000未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i % 2 == 0  :<tab>iを2で割った余りが0のとき、<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>print(S[n])<tab>S(n)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>for i  in range(2, int(math.sqrt(N))+1)  :<tab>2からmath.sqrt(N)の整数値に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if N % i == 0  :<tab>Nをiで割った余りが0のとき、<EOS>
<SOS>return False<tab>偽を関数出力とする<EOS>
<SOS>return True<tab>真を関数出力とする<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(2, a)  :<tab>2からa未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if Sosu(i)  :<tab>Sosu(i)のとき、<EOS>
<SOS>other = a - i<tab>aからiを引いた値をotherとする<EOS>
<SOS>if other >= i and Sosu(other)  :<tab>otherがi以上、かつSosu(other)のとき、<EOS>
<SOS>return count<tab>countを関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(main(n))<tab>main(n)を出力する<EOS>
<SOS>if n % 2 == 0  :<tab>nを2で割った余りが0のとき、<EOS>
<SOS>return n // 2<tab>nを2で割った商を関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>while n != 1  :<tab>nが1と等しくない間、繰り返す<EOS>
<SOS>n = Collatz(n)<tab>Collatz(n)をnとする<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>S = 0<tab>0をSとする<EOS>
<SOS>for i  in range(600//d)  :<tab>0から600をdで割った商未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(S)<tab>Sを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>q = int(input())<tab>入力された文字列の整数値をqとする<EOS>
<SOS>if q == -1  :<tab>qが-1のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>n = 1<tab>1をnとする<EOS>
<SOS>x = q / 2<tab>qを2で割った値をxとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if abs(x**3 - q) < (0.00001 * q)  :<tab>{{xの3乗からqを引いた値}}の絶対値が({{0.00001にqを掛けた値}})の組より小さいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>x = x - (x**3 - q) / (3 * x**2)<tab>xから({{xの3乗からqを引いた値}})の組を({{3にxの2乗を掛けた値}})の組で割った値を引いた値をxとする<EOS>
<SOS>print('{:.6f}'.format(x))<tab>format(x)を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>a = input()<tab>入力された文字列をaとする<EOS>
<SOS>if a == "END OF INPUT"  :<tab>aが"END OF INPUT"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>b = list(a)<tab>aのリストをbとする<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(len(b))  :<tab>0からbの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if b[i] != ' '  :<tab>b(i)が' 'と等しくないとき、<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>count_j = 0<tab>0をcount_jとする<EOS>
<SOS>count_i = 0<tab>0をcount_iとする<EOS>
<SOS>for i  in range(len(l)-2)  :<tab>'0からlの長さから2を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if l[i] == "J" and l[i+1] == "O" and l[i+2] == "I"  :<tab>{{l(i)が"J"}}、かつ{{l({{iに1を加えた値}})が"O"かどうか}}、かつl({{iに2を加えた値}})が"I"のとき、<EOS>
<SOS>if l[i] == "I" and l[i+1] == "O" and l[i+2] == "I"  :<tab>{{l(i)が"I"}}、かつ{{l({{iに1を加えた値}})が"O"かどうか}}、かつl({{iに2を加えた値}})が"I"のとき、<EOS>
<SOS>return count_j, count_i<tab>(count_jとcount_i)の組を関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>j, i  = JOIOI(l)<tab>JOIOI(l)を展開し順にjとiとする<EOS>
<SOS>print(j)<tab>jを出力する<EOS>
<SOS>print(i)<tab>iを出力する<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>pal = "True"<tab>"True"をpalとする<EOS>
<SOS>for i  in range(len(s)//2)  :<tab>0からsの長さを2で割った商未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if s[i] != s[-i-1]  :<tab>s(i)がs({{-iから1を引いた値}})と等しくないとき、<EOS>
<SOS>pal = "False"<tab>"False"をpalとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if pal == "True"  :<tab>palが"True"のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>sentence = list(input().split())<tab>入力された文字列を空白で分割した列のリストをsentenceとする<EOS>
<SOS>max_length = 0<tab>0をmax_lengthとする<EOS>
<SOS>max_sentence = ""<tab>""をmax_sentenceとする<EOS>
<SOS>count = []<tab>空列をcountとする<EOS>
<SOS>for i  in range(len(sentence))  :<tab>0からsentenceの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if max_length < len(sentence[i])  :<tab>max_lengthがsentence(i)の長さより小さいとき、<EOS>
<SOS>max_length = len(sentence[i])<tab>sentence(i)の長さをmax_lengthとする<EOS>
<SOS>max_sentence = sentence[i]<tab>sentence(i)をmax_sentenceとする<EOS>
<SOS>new_word = False<tab>偽をnew_wordとする<EOS>
<SOS>for j  in range(len(count))  :<tab>0からcountの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if count[j][0] == sentence[i]  :<tab>count(j)(0)がsentence(i)のとき、<EOS>
<SOS>new_word = True<tab>真をnew_wordとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if new_word == False  :<tab>new_wordが偽のとき、<EOS>
<SOS>count = sorted(count, key = itemgetter(1), reverse = True)<tab>countと((key, itemgetter(1))と(reverse, 真))からなる辞書をソートした列をcountとする<EOS>
<SOS>print(count[0][0], max_sentence)<tab>countの最初値の最初値とmax_sentenceを出力する<EOS>
<SOS>A = list(input().split())<tab>入力された文字列を空白で分割した列のリストをAとする<EOS>
<SOS>for i  in range(len(A))  :<tab>0からAの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if "apple" in A[i]  :<tab>"apple"がA(i)に含まれるとき、<EOS>
<SOS>A[i]  = A[i].replace("apple", "peach")<tab>A(i)内の"apple"を"peach"で置き換えた文字列をA[i] にする<EOS>
<SOS>A[i]  = A[i].replace("peach", "apple")<tab>A(i)内の"peach"を"apple"で置き換えた文字列をA[i] にする<EOS>
<SOS>print(" ".join(A))<tab>Aを文字列" "で連結した文字列を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>hit = 0<tab>0をhitとする<EOS>
<SOS>brow = 0<tab>0をbrowとする<EOS>
<SOS>if a1 == b1  :<tab>a1がb1のとき、<EOS>
<SOS>if a2 == b2  :<tab>a2がb2のとき、<EOS>
<SOS>if a3 == b3  :<tab>a3がb3のとき、<EOS>
<SOS>if a4 == b4  :<tab>a4がb4のとき、<EOS>
<SOS>if a1 == b2 or a1 == b3 or a1 == b4  :<tab>{{a1がb2}}、または{{a1がb3かどうか}}、またはa1がb4のとき、<EOS>
<SOS>if a2 == b1 or a2 == b3 or a2 == b4  :<tab>{{a2がb1}}、または{{a2がb3かどうか}}、またはa2がb4のとき、<EOS>
<SOS>if a3 == b1 or a3 == b2 or a3 == b4  :<tab>{{a3がb1}}、または{{a3がb2かどうか}}、またはa3がb4のとき、<EOS>
<SOS>if a4 == b1 or a4 == b2 or a4 == b3  :<tab>{{a4がb1}}、または{{a4がb2かどうか}}、またはa4がb3のとき、<EOS>
<SOS>print(hit, brow)<tab>hitとbrowを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(1, n)  :<tab>1からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>s = 0<tab>0をsとする<EOS>
<SOS>for j  in range(i, n)  :<tab>iからn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if s == n  :<tab>sがnのとき、<EOS>
<SOS>if s > n  :<tab>sがnより大きいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>ans = []<tab>空列をansとする<EOS>
<SOS>for i  in range(1, s)  :<tab>1からs未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>i_tax = int(i + i*x/100)<tab>iに{{{{iにxを掛けた値}}を100で割った値}}を加えた値の整数値をi_taxとする<EOS>
<SOS>for j  in range(1, s)  :<tab>1からs未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>j_tax = int(j + j*x/100)<tab>jに{{{{jにxを掛けた値}}を100で割った値}}を加えた値の整数値をj_taxとする<EOS>
<SOS>if i_tax + j_tax > s  :<tab>i_taxにj_taxを加えた値がsより大きいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if i_tax + j_tax == s  :<tab>i_taxにj_taxを加えた値がsのとき、<EOS>
<SOS>return ans<tab>ansを関数出力とする<EOS>
<SOS>ans = int(i + i*y/100) + int(j + j*y/100)<tab>{{iに{{{{iにyを掛けた値}}を100で割った値}}を加えた値}}の整数値に{{jに{{{{jにyを掛けた値}}を100で割った値}}を加えた値}}の整数値を加えた値をansとする<EOS>
<SOS>return ans<tab>ansを関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>x, y, s  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にx、y、sとする<EOS>
<SOS>if x == 0 and y == 0  :<tab>xが0、かつyが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>lst = calc_before(x, s)<tab>calc_before(x,s)をlstとする<EOS>
<SOS>max_price = 0<tab>0をmax_priceとする<EOS>
<SOS>for i  in range(len(lst))  :<tab>0からlstの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>price = calc_after(lst[i][0], lst[i][1], y)<tab>calc_after(lst(i)の最初値,lst(i)(1),y)をpriceとする<EOS>
<SOS>max_price = max(price, max_price)<tab>priceとmax_priceの最大値をmax_priceとする<EOS>
<SOS>print(max_price)<tab>max_priceを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>if n == 0 and m == 0  :<tab>nが0、かつmが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>catalog = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをcatalogとする<EOS>
<SOS>max_p = 0<tab>0をmax_pとする<EOS>
<SOS>for i  in range(n-1)  :<tab>0からnから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(1, n)  :<tab>1からn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if i != j  :<tab>iがjと等しくないとき、<EOS>
<SOS>x = catalog[i] + catalog[j]<tab>catalog(i)にcatalog(j)を加えた値をxとする<EOS>
<SOS>if x <= m and x > max_p  :<tab>xがm以下、かつxがmax_pより大きいとき、<EOS>
<SOS>max_p = x<tab>xをmax_pとする<EOS>
<SOS>if max_p == 0  :<tab>max_pが0のとき、<EOS>
<SOS>print("NONE")<tab>"NONE"を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>lst = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをlstとする<EOS>
<SOS>ave_lst = sum(lst) / len(lst)<tab>lstの総和をlstの長さで割った値をave_lstとする<EOS>
<SOS>Sum = 0<tab>0をSumとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if lst[i] <= ave_lst  :<tab>lst(i)がave_lst以下のとき、<EOS>
<SOS>print(Sum)<tab>Sumを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>if N == 1  :<tab>Nが1のとき、<EOS>
<SOS>return False<tab>偽を関数出力とする<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for i  in range(a+1, b+1)  :<tab>aに1を加えた値からbに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if Sosu(i)  :<tab>Sosu(i)のとき、<EOS>
<SOS>return ans<tab>ansを関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(amount_sosu(n, n*2))<tab>amount_sosu(n,{{nに2を掛けた値}})を出力する<EOS>
<SOS>n, t, e  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にn、t、eとする<EOS>
<SOS>watch = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをwatchとする<EOS>
<SOS>ans = False<tab>偽をansとする<EOS>
<SOS>for w  in range(n)  :<tab>0からn未満までの数列の各要素を順にwとして、繰り返す<EOS>
<SOS>for i  in range(e+1)  :<tab>0からeに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if (t+i) % watch[w] == 0  :<tab>({{tにiを加えた値}})の組をwatch(w)で割った余りが0のとき、<EOS>
<SOS>ans = True<tab>真をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if (t-i) % watch[w] == 0  :<tab>({{tからiを引いた値}})の組をwatch(w)で割った余りが0のとき、<EOS>
<SOS>ans = True<tab>真をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if ans == True  :<tab>ansが真のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if ans == True  :<tab>ansが真のとき、<EOS>
<SOS>print(w+1)<tab>wに1を加えた値を出力する<EOS>
<SOS>d, l  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にdとlとする<EOS>
<SOS>s = int(d / l + d % l)<tab>{{dをlで割った値}}に{{dをlで割った余り}}を加えた値の整数値をsとする<EOS>
<SOS>print(s)<tab>sを出力する<EOS>
<SOS>if d == 0  :<tab>dが0のとき、<EOS>
<SOS>new_i = square[n][0] - 1<tab>square(n)(0)から1を引いた値をnew_iとする<EOS>
<SOS>new_j = square[n][1]<tab>square(n)(1)をnew_jとする<EOS>
<SOS>new_i = square[n][0]<tab>square(n)の最初値をnew_iとする<EOS>
<SOS>new_j = square[n][1] - 1<tab>square(n)(1)から1を引いた値をnew_jとする<EOS>
<SOS>new_i = square[n][0] + 1<tab>square(n)(0)に1を加えた値をnew_iとする<EOS>
<SOS>new_j = square[n][1]<tab>square(n)(1)をnew_jとする<EOS>
<SOS>new_i = square[n][0]<tab>square(n)の最初値をnew_iとする<EOS>
<SOS>new_j = square[n][1] + 1<tab>square(n)(1)に1を加えた値をnew_jとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>if N == 0  :<tab>Nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>square = [[0, 0]]<tab>((0と0)からなる列)からなる列をsquareとする<EOS>
<SOS>for i  in range(N-1)  :<tab>0からNから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>n, d  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとdとする<EOS>
<SOS>sort_x_square = sorted(square)<tab>squareをソートした列をsort_x_squareとする<EOS>
<SOS>print(sort_x_square[-1][0] - sort_x_square[0][0]+1, sort_y_square[-1][1] - sort_y_square[0][1]+1)<tab>{{sort_x_squareの末尾値(0)からsort_x_squareの最初値の最初値を引いた値}}に1を加えた値と{{sort_y_squareの末尾値(1)からsort_y_squareの最初値(1)を引いた値}}に1を加えた値を出力する<EOS>
<SOS>new = []<tab>空列をnewとする<EOS>
<SOS>re_a = list(reversed(a))<tab>aを反転した列のリストをre_aとする<EOS>
<SOS>re_b = list(reversed(b))<tab>bを反転した列のリストをre_bとする<EOS>
<SOS>return list(set(new))<tab>newの集合のリストを関数出力とする<EOS>
<SOS>m = int(input())<tab>入力された文字列の整数値をmとする<EOS>
<SOS>for i  in range(m)  :<tab>0からm未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>train = list(input())<tab>入力された文字列のリストをtrainとする<EOS>
<SOS>new_train = []<tab>空列をnew_trainとする<EOS>
<SOS>for j  in range(1, len(train))  :<tab>1からtrainの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>pre_train = train[:j]<tab>trainの位置先頭から位置jまでの部分をpre_trainとする<EOS>
<SOS>bk_train = train[j:]<tab>trainの先頭j個を取り除いた部分をbk_trainとする<EOS>
<SOS>new_train = new_train + rename(pre_train, bk_train)<tab>new_trainにrename(pre_train,bk_train)を加えた値をnew_trainとする<EOS>
<SOS>print(len(list(set(new_train))))<tab>new_trainの集合のリストの長さを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>s = input()<tab>入力された文字列をsとする<EOS>
<SOS>tmp = []<tab>空列をtmpとする<EOS>
<SOS>if s == '.'  :<tab>sが'.'のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>ans = True<tab>真をansとする<EOS>
<SOS>for i  in range(len(s))  :<tab>0からsの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if s[i] == '('  :<tab>s(i)が'('のとき、<EOS>
<SOS>if '(' not in tmp  :<tab>not in('(',tmp)のとき、<EOS>
<SOS>ans = False<tab>偽をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if '[' not in tmp  :<tab>not in('[',tmp)のとき、<EOS>
<SOS>ans = False<tab>偽をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>elif tmp[-1] == '['  :<tab>("tmp(-1)が'['の",)<EOS>
<SOS>if len(tmp) != 0 or ans == False  :<tab>tmpの長さが0と等しくなく、またはansが偽のとき、<EOS>
<SOS>print('no')<tab>'no'を出力する<EOS>
<SOS>pas = input()<tab>入力された文字列をpasとする<EOS>
<SOS>if len(pas) < 6  :<tab>pasの長さが6より小さいとき、<EOS>
<SOS>print("INVALID")<tab>"INVALID"を出力する<EOS>
<SOS>tmp = 0<tab>0をtmpとする<EOS>
<SOS>for i  in range(11)  :<tab>0から11未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i <= 4  :<tab>iが4以下のとき、<EOS>
<SOS>tmp = tmp % 11<tab>tmpを11で割った余りをtmpとする<EOS>
<SOS>if tmp <= 1  :<tab>tmpが1以下のとき、<EOS>
<SOS>return 0<tab>0を関数出力とする<EOS>
<SOS>m = list(input())<tab>入力された文字列のリストをmとする<EOS>
<SOS>if m[11] == '?'  :<tab>m(11)が'?'のとき、<EOS>
<SOS>print(CheckDisit(m))<tab>CheckDisit(m)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>color = [[0, 0, 0], [0, 0, 255], [0, 255, 0], [0, 255, 255], [255, 0, 0], [255, 0, 255], [255, 255, 0], [255, 255, 255]]<tab>((0、0、0)からなる列、(0、0、255)からなる列、(0、255、0)からなる列、(0、255、255)からなる列、(255、0、0)からなる列、(255、0、255)からなる列、(255、255、0)からなる列、(255、255、255)からなる列)からなる列をcolorとする<EOS>
<SOS>color_16 = input()<tab>入力された文字列をcolor_16とする<EOS>
<SOS>if color_16 == "0"  :<tab>color_16が"0"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>color_R = int(color_16[1] + color_16[2], 16)<tab>16進数文字列color_16(1)にcolor_16(2)を加えた値の整数値をcolor_Rとする<EOS>
<SOS>color_G = int(color_16[3] + color_16[4], 16)<tab>16進数文字列color_16(3)にcolor_16(4)を加えた値の整数値をcolor_Gとする<EOS>
<SOS>color_B = int(color_16[5] + color_16[6], 16)<tab>16進数文字列color_16(5)にcolor_16(6)を加えた値の整数値をcolor_Bとする<EOS>
<SOS>min_d = 500<tab>500をmin_dとする<EOS>
<SOS>for i  in range(8)  :<tab>0から8未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>R = color[i][0]<tab>color(i)の最初値をRとする<EOS>
<SOS>G = color[i][1]<tab>color(i)(1)をGとする<EOS>
<SOS>B = color[i][2]<tab>color(i)(2)をBとする<EOS>
<SOS>d = math.sqrt((R - color_R)**2 + (G - color_G)**2 + (B - color_B)**2)<tab>math.sqrt((R - color_R)**2 + (G - color_G)**2 + (B - color_B)**2)をdとする<EOS>
<SOS>if min_d > d  :<tab>min_dがdより大きいとき、<EOS>
<SOS>min_d = d<tab>dをmin_dとする<EOS>
<SOS>color_num = i<tab>iをcolor_numとする<EOS>
<SOS>if color_num == 0  :<tab>color_numが0のとき、<EOS>
<SOS>print("black")<tab>"black"を出力する<EOS>
<SOS>print("blue")<tab>"blue"を出力する<EOS>
<SOS>print("lime")<tab>"lime"を出力する<EOS>
<SOS>print("aqua")<tab>"aqua"を出力する<EOS>
<SOS>print("red")<tab>"red"を出力する<EOS>
<SOS>print("fuchsia")<tab>"fuchsia"を出力する<EOS>
<SOS>print("yellow")<tab>"yellow"を出力する<EOS>
<SOS>tanni = ['Man', 'Oku', 'Cho', 'Kei', 'Gai', 'Jo', 'Jou', 'Ko', 'Kan', 'Sei',<tab>('Man'、'Oku'、'Cho'、'Kei'、'Gai'、'Jo'、'Jou'、'Ko'、'Kan'、'Sei'、'Sai'、'Gok'、'Ggs'、'Asg'、'Nyt'、'Fks'、'Mts'、'end')からなる列をtanniとする<EOS>
<SOS>', 'Gok', 'Ggs', 'Asg', 'Nyt', 'Fks', 'Mts' , 'end']<tab>, 'Gok', 'Ggs', 'Asg', 'Nyt', 'Fks', 'Mts' , 'end']<EOS><EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>m, n  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にmとnとする<EOS>
<SOS>if m == 0 and n == 0  :<tab>mが0、かつnが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>s = m**n<tab>mのn乗をsとする<EOS>
<SOS>ans = []<tab>空列をansとする<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>s = s // 10**4<tab>sを10の4乗で割った商をsとする<EOS>
<SOS>if s == 0  :<tab>sが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if tanni[i] != 'end'  :<tab>tanni(i)が'end'と等しくないとき、<EOS>
<SOS>switch = False<tab>偽をswitchとする<EOS>
<SOS>for j  in range(len(ans))  :<tab>0からansの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if ans[j] == 0  :<tab>ans(j)が0のとき、<EOS>
<SOS>switch = True<tab>真をswitchとする<EOS>
<SOS>if switch == True  :<tab>switchが真のとき、<EOS>
<SOS>switch = False<tab>偽をswitchとする<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if siki[j] == '*'  :<tab>siki(j)が'*'のとき、<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) * int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値にsiki({{jに1を加えた値}})の整数値を掛けた値の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>if (int(siki[j-1]) < 0 and int(siki[j+1]) < 0) or (int(siki[j-1]) >= 0 and int(siki[j+1]) >= 0)  :<tab>({{siki[j-1]の整数値が0より小さく}}、かつ{{siki[j+1]の整数値が0より小さいかどうか}})の組、または({{siki[j-1]の整数値が0以上}}、かつ{{siki[j+1]の整数値が0以上かどうか}})の組のとき、<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) // int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値をsiki({{jに1を加えた値}})の整数値で割った商の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>if len(siki) == 1  :<tab>sikiの長さが1のとき、<EOS>
<SOS>return (siki[0])<tab>(sikiの最初値)の組を関数出力とする<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if '+' not in siki and '-' not in siki :<tab>not in('+',siki)、かつnot in('-',siki)のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if siki[j] == '+'  :<tab>siki(j)が'+'のとき、<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) + int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値にsiki({{jに1を加えた値}})の整数値を加えた値の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) - int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値からsiki({{jに1を加えた値}})の整数値を引いた値の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>if len(siki) == 1  :<tab>sikiの長さが1のとき、<EOS>
<SOS>return (siki[0])<tab>(sikiの最初値)の組を関数出力とする<EOS>
<SOS>siki = calc_zyouzyo(siki)<tab>calc_zyouzyo(siki)をsikiとする<EOS>
<SOS>siki = calc_kagen(siki)<tab>calc_kagen(siki)をsikiとする<EOS>
<SOS>return (siki)<tab>(siki)の組を関数出力とする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>tmp = list(input())<tab>入力された文字列のリストをtmpとする<EOS>
<SOS>siki = []<tab>空列をsikiとする<EOS>
<SOS>num = ''<tab>''をnumとする<EOS>
<SOS>for j  in range(len(tmp))  :<tab>0からtmpの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if tmp[j] in ['*', '/', '+', '-', '(', ')', '=']  :<tab>tmp(j)が('*'、'/'、'+'、'-'、'('、')'、'=')からなる列に含まれるとき、<EOS>
<SOS>if num != ''  :<tab>numが''と等しくないとき、<EOS>
<SOS>num = ''<tab>''をnumとする<EOS>
<SOS>siki.remove('=')<tab>sikiから'='を取り除いた集まり<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if j == len(siki) or ')' not in siki :<tab>jがsikiの長さ、またはnot in(')',siki)のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>stack = []<tab>空列をstackとする<EOS>
<SOS>if siki[j] == ')'  :<tab>siki(j)が')'のとき、<EOS>
<SOS>for k  in range(j-1,-1, -1)  :<tab>jから1を引いた値から-1未満までの-1間隔の数列の各要素を順にkとして、繰り返す<EOS>
<SOS>if siki[k] == '('  :<tab>siki(k)が'('のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>siki[k]  = calc(stack)<tab>calc(stack)をsiki[k] にする<EOS>
<SOS>del siki[k+1 : j+1]<tab>sikiの位置kに1を加えた値から位置jに1を加えた値までの部分を削除する<EOS>
<SOS>j = k+1<tab>kに1を加えた値をjとする<EOS>
<SOS>siki = calc(siki)<tab>calc(siki)をsikiとする<EOS>
<SOS>print(siki)<tab>sikiを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while i < len(s)  :<tab>iがsの長さより小さい間、繰り返す<EOS>
<SOS>if s[i] == "@"  :<tab>s(i)が"@"のとき、<EOS>
<SOS>for j  in range(int(s[i+1]))  :<tab>0からs({{iに1を加えた値}})の整数値未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>H, A, B  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にH、A、Bとする<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for i  in range(A, B+1)  :<tab>AからBに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if H % i == 0  :<tab>Hをiで割った余りが0のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>cnt = 0<tab>0をcntとする<EOS>
<SOS>for a  in range(10)  :<tab>0から10未満までの数列の各要素を順にaとして、繰り返す<EOS>
<SOS>for b  in range(10)  :<tab>0から10未満までの数列の各要素を順にbとして、繰り返す<EOS>
<SOS>for c  in range(10)  :<tab>0から10未満までの数列の各要素を順にcとして、繰り返す<EOS>
<SOS>for d  in range(10)  :<tab>0から10未満までの数列の各要素を順にdとして、繰り返す<EOS>
<SOS>if a + b + c + d == n  :<tab>{{{{aにbを加えた値}}にcを加えた値}}にdを加えた値がnのとき、<EOS>
<SOS>print(cnt)<tab>cntを出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>v = int(input())<tab>入力された文字列の整数値をvとする<EOS>
<SOS>maxv = v<tab>vをmaxvとする<EOS>
<SOS>minv = v<tab>vをminvとする<EOS>
<SOS>rieki = -(10**9)<tab>-(10の9乗)の組をriekiとする<EOS>
<SOS>for i  in range(n-1)  :<tab>0からnから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>v = int(input())<tab>入力された文字列の整数値をvとする<EOS>
<SOS>if rieki < v - minv  :<tab>riekiがvからminvを引いた値より小さいとき、<EOS>
<SOS>rieki = v - minv<tab>vからminvを引いた値をriekiとする<EOS>
<SOS>if minv > v  :<tab>minvがvより大きいとき、<EOS>
<SOS>minv = v<tab>vをminvとする<EOS>
<SOS>print(rieki)<tab>riekiを出力する<EOS>
<SOS>stack = []<tab>空列をstackとする<EOS>
<SOS>lst = input().split()<tab>入力された文字列を空白で分割した列をlstとする<EOS>
<SOS>for i  in range(len(lst))  :<tab>0からlstの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if lst[i] in ['+', '-', '*', '/']  :<tab>lst(i)が('+'、'-'、'*'、'/')からなる列に含まれるとき、<EOS>
<SOS>if lst[i] == '+'  :<tab>lst(i)が'+'のとき、<EOS>
<SOS>print(stack[0])<tab>stackの最初値を出力する<EOS>
<SOS>n, q  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとqとする<EOS>
<SOS>process = []<tab>空列をprocessとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>name, time  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にnameとtimeとする<EOS>
<SOS>time = 0<tab>0をtimeとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if len(process) == 0  :<tab>processの長さが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if process[0][1] > q  :<tab>processの最初値(1)がqより大きいとき、<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>S = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをSとする<EOS>
<SOS>q = int(input())<tab>入力された文字列の整数値をqとする<EOS>
<SOS>T = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをTとする<EOS>
<SOS>cnt = 0<tab>0をcntとする<EOS>
<SOS>for i  in range(q)  :<tab>0からq未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if T[i] in S  :<tab>T(i)がSに含まれるとき、<EOS>
<SOS>print(cnt)<tab>cntを出力する<EOS>
<SOS>if j-1 >= 0  :<tab>jから1を引いた値が0以上のとき、<EOS>
<SOS>if A[i][j-1] == "."  :<tab>A(i)({{jから1を引いた値}})が"."のとき、<EOS>
<SOS>A[i][j-1]  = "+"<tab>"+"をA[i][j-1] にする<EOS>
<SOS>Check(A, i, j-1, W, H)<tab>Check(A,i,jから1を引いた値,W,H)<EOS>
<SOS>if i+1 < H  :<tab>iに1を加えた値がHより小さいとき、<EOS>
<SOS>if A[i+1][j] == "."  :<tab>A({{iに1を加えた値}})(j)が"."のとき、<EOS>
<SOS>A[i+1][j] = "+"<tab>"+"をA[i+1][j]にする<EOS>
<SOS>Check(A, i+1, j, W, H)<tab>Check(A,iに1を加えた値,j,W,H)<EOS>
<SOS>if j+1 < W  :<tab>jに1を加えた値がWより小さいとき、<EOS>
<SOS>if A[i][j+1] == "."  :<tab>A(i)({{jに1を加えた値}})が"."のとき、<EOS>
<SOS>A[i][j+1]  = "+"<tab>"+"をA[i][j+1] にする<EOS>
<SOS>Check(A, i, j+1, W, H)<tab>Check(A,i,jに1を加えた値,W,H)<EOS>
<SOS>if i-1 >= 0  :<tab>iから1を引いた値が0以上のとき、<EOS>
<SOS>if A[i-1][j] == "."  :<tab>A({{iから1を引いた値}})(j)が"."のとき、<EOS>
<SOS>A[i-1][j]  = "+"<tab>"+"をA[i-1][j] にする<EOS>
<SOS>Check(A, i-1, j, W, H)<tab>Check(A,iから1を引いた値,j,W,H)<EOS>
<SOS>return (A)<tab>(A)の組を関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>W, H  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にWとHとする<EOS>
<SOS>if W == 0 and H == 0  :<tab>Wが0、かつHが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>Tile = [list(input()) for i in range(H)]<tab>{{0からH未満までの数列}}の各要素をiとし、入力された文字列のリストの列をTileとする<EOS>
<SOS>for i  in range(H)  :<tab>0からH未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(W)  :<tab>0からW未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if Tile[i][j] == "@"  :<tab>Tile(i)(j)が"@"のとき、<EOS>
<SOS>my_i = i<tab>iをmy_iとする<EOS>
<SOS>my_j = j<tab>jをmy_jとする<EOS>
<SOS>Tile[my_i][my_j]  = "+"<tab>"+"をTile[my_i][my_j] にする<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(H)  :<tab>0からH未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(W)  :<tab>0からW未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if Tile_new[i][j] == "+"  :<tab>Tile_new(i)(j)が"+"のとき、<EOS>
<SOS>print(count<tab>countを出力する<EOS>
<SOS>print("Hello World")<tab>"Hello World"を出力する<EOS>
<SOS>x = int(input())<tab>入力された文字列の整数値をxとする<EOS>
<SOS>print(x**3)<tab>xの3乗を出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>print(n * 32)<tab>nに32を掛けた値を出力する<EOS>
<SOS>x = int(input())<tab>入力された文字列の整数値をxとする<EOS>
<SOS>print(int((x-30) / 2))<tab>{{({{xから30を引いた値}})の組を2で割った値}}の整数値を出力する<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>print(a+b+c)<tab>{{aにbを加えた値}}にcを加えた値を出力する<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(a*b, (a+b)*2)<tab>aにbを掛けた値と({{aにbを加えた値}})の組に2を掛けた値を出力する<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>print("a > b")<tab>"a > b"を出力する<EOS>
<SOS>print("a < b")<tab>"a < b"を出力する<EOS>
<SOS>a, b = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(int((a+b)/2))<tab>{{({{aにbを加えた値}})の組を2で割った値}}の整数値を出力する<EOS>
<SOS>a, b = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>if b > a  :<tab>bがaより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>print(a - b)<tab>aからbを引いた値を出力する<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>if c == 1  :<tab>cが1のとき、<EOS>
<SOS>print("Open")<tab>"Open"を出力する<EOS>
<SOS>print("Open")<tab>"Open"を出力する<EOS>
<SOS>time = int(input())<tab>入力された文字列の整数値をtimeとする<EOS>
<SOS>H = time//3600<tab>timeを3600で割った商をHとする<EOS>
<SOS>M = time%3600<tab>timeを3600で割った余りをMとする<EOS>
<SOS>S = M%60<tab>Mを60で割った余りをSとする<EOS>
<SOS>M = M//60<tab>Mを60で割った商をMとする<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>d = int(a / b)<tab>aをbで割った値の整数値をdとする<EOS>
<SOS>e = a % b<tab>aをbで割った余りをeとする<EOS>
<SOS>f = a / b<tab>aをbで割った値をfとする<EOS>
<SOS>print("{0} {1} {2:.5f}".format(d, e, f))<tab>format(d,e,f)を出力する<EOS>
<SOS>pi = 3.141592653589<tab>3.141592653589をpiとする<EOS>
<SOS>r = float(input())<tab>入力された文字列の浮動小数点数値をrとする<EOS>
<SOS>a = r * r * pi<tab>rにrを掛けた値にpiを掛けた値をaとする<EOS>
<SOS>b = r * 2 * pi<tab>rに2を掛けた値にpiを掛けた値をbとする<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(a * b / 3.305785)<tab>{{aにbを掛けた値}}を3.305785で割った値を出力する<EOS>
<SOS>a, b,c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>if b > c  :<tab>bがcより大きいとき、<EOS>
<SOS>b, c = c, b<tab>bとcを入れ替える<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>print(a, b, c)<tab>a、b、cを出力する<EOS>
<SOS>e1, e2, e3, e4  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にe1、e2、e3、e4とする<EOS>
<SOS>if e1 == e2 and e3 == e4 or e1 == e3 and e2 == e4 or e1 == e4 and e2 == e3  :<tab>{{e1がe2}}、かつ{{e3がe4かどうか}}、または{{e1がe3}}、かつ{{e2がe4かどうか}}、または{{e1がe4}}、かつ{{e2がe3かどうか}}のとき、<EOS>
<SOS>print("yes")<tab>"yes"を出力する<EOS>
<SOS>N, A, B, C, D  = map(int, input().split())[#Document [# '# setX']]<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にN、A、B、C、Dとする<EOS>
<SOS>if N % A == 0  :<tab>NをAで割った余りが0のとき、<EOS>
<SOS>X = N // A * B<tab>NをAで割った商にBを掛けた値をXとする<EOS>
<SOS>if N % C == 0  :<tab>NをCで割った余りが0のとき、<EOS>
<SOS>Y = N // C * D<tab>NをCで割った商にDを掛けた値をYとする<EOS>
<SOS>print(min(X, Y))<tab>XとYの最小値を出力する<EOS>
<SOS>A, B, C  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にA、B、Cとする<EOS>
<SOS>coin = 0<tab>0をcoinとする<EOS>
<SOS>day = 1<tab>1をdayとする<EOS>
<SOS>while coin < C  :<tab>coinがCより小さい間、繰り返す<EOS>
<SOS>if day % 7 == 0  :<tab>dayを7で割った余りが0のとき、<EOS>
<SOS>print(day-1)<tab>dayから1を引いた値を出力する<EOS>
<SOS>n = 1000<tab>1000をnとする<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while i < n  :<tab>iがnより小さい間、繰り返す<EOS>
<SOS>print("Hello World")<tab>"Hello World"を出力する<EOS>
<SOS>i = i + 1<tab>iに1を加えた値をiとする<EOS>
<SOS>if t == 1  :<tab>tが1のとき、<EOS>
<SOS>return 6000<tab>6000を関数出力とする<EOS>
<SOS>return 4000<tab>4000を関数出力とする<EOS>
<SOS>return 3000<tab>3000を関数出力とする<EOS>
<SOS>return 2000<tab>2000を関数出力とする<EOS>
<SOS>t1, n1  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt1とn1とする<EOS>
<SOS>t2, n2  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt2とn2とする<EOS>
<SOS>t3, n3  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt3とn3とする<EOS>
<SOS>t4, n4  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt4とn4とする<EOS>
<SOS>print(change(t1) * n1)<tab>change(t1)にn1を掛けた値を出力する<EOS>
<SOS>print(change(t2) * n2)<tab>change(t2)にn2を掛けた値を出力する<EOS>
<SOS>print(change(t3) * n3)<tab>change(t3)にn3を掛けた値を出力する<EOS>
<SOS>print(change(t4) * n4)<tab>change(t4)にn4を掛けた値を出力する<EOS>
<SOS>for i  in range(7)  :<tab>0から7未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>hi, low  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にhiとlowとする<EOS>
<SOS>print(hi - low)<tab>hiからlowを引いた値を出力する<EOS>
<SOS>for i  in range(9)  :<tab>0から9未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>name, a, b  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にname、a、bとする<EOS>
<SOS>print(name, int(a)+int(b), 200*int(a)+300*int(b))<tab>name、aの整数値にbの整数値を加えた値、{{200にaの整数値を掛けた値}}に{{300にbの整数値を掛けた値}}を加えた値を出力する<EOS>
<SOS>sum = 0<tab>0をsumとする<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(sum)<tab>sumを出力する<EOS>
<SOS>i = 1<tab>1をiとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>x = int(input())<tab>入力された文字列の整数値をxとする<EOS>
<SOS>if x == 0  :<tab>xが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>i = i + 1<tab>iに1を加えた値をiとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>if a == 0 and b == 0  :<tab>aが0、かつbが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>print(a, b)<tab>aとbを出力する<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>for i  in range(N)  :<tab>0からN未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>if a**2 == b**2 + c**2 or b**2 == c**2 + a**2 or c**2 == a**2 + b**2  :<tab>{{aの2乗が{{bの2乗にcの2乗を加えた値}}}}、または{{bの2乗が{{cの2乗にaの2乗を加えた値}}かどうか}}、またはcの2乗が{{aの2乗にbの2乗を加えた値}}のとき、<EOS>
<SOS>print("YES")<tab>"YES"を出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>S = 100000<tab>100000をSとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if S % 1000 != 0  :<tab>Sを1000で割った余りが0と等しくないとき、<EOS>
<SOS>S = (int(S / 1000) + 1) * 1000<tab>({{{{Sを1000で割った値}}の整数値に1を加えた値}})の組に1000を掛けた値をSとする<EOS>
<SOS>print(S)<tab>Sを出力する<EOS>
<SOS>for i  in range(1, 10)  :<tab>1から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(1, 10)  :<tab>1から10未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>H, W  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にHとWとする<EOS>
<SOS>if H == 0 and W == 0  :<tab>Hが0、かつWが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>for h  in range(H)  :<tab>0からH未満までの数列の各要素を順にhとして、繰り返す<EOS>
<SOS>for w  in range(W)  :<tab>0からW未満までの数列の各要素を順にwとして、繰り返す<EOS>
<SOS>if (h + w) % 2 == 0  :<tab>({{hにwを加えた値}})の組を2で割った余りが0のとき、<EOS>
<SOS>print("#", end="")<tab>"#"と((end, ""))からなる辞書を出力する<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>a, op, b  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にa、op、bとする<EOS>
<SOS>a = int(a)<tab>aの整数値をaとする<EOS>
<SOS>b = int(b)<tab>bの整数値をbとする<EOS>
<SOS>if op == "?"  :<tab>opが"?"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(a + b)<tab>aにbを加えた値を出力する<EOS>
<SOS>print(a - b)<tab>aからbを引いた値を出力する<EOS>
<SOS>print(int(a / b))<tab>{{aをbで割った値}}の整数値を出力する<EOS>
<SOS>print(a * b)<tab>aにbを掛けた値を出力する<EOS>
<SOS>n = input()<tab>入力された文字列をnとする<EOS>
<SOS>l = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをlとする<EOS>
<SOS>print(min(l), max(l), sum(l))<tab>lの最小値、lの最大値、lの総和を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>if N == 0  :<tab>Nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>data = list(int(input()) for i in range(N))<tab>{{0からN未満までの数列}}の各要素をiとし、入力された文字列の整数値の列のリストをdataとする<EOS>
<SOS>del data[0]<tab>dataの最初値を削除する<EOS>
<SOS>del data[-1]<tab>dataの末尾値を削除する<EOS>
<SOS>data_ave = sum(data)/len(data)<tab>dataの総和をdataの長さで割った値をdata_aveとする<EOS>
<SOS>print(int(data_ave))<tab>data_aveの整数値を出力する<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>return 1<tab>1を関数出力とする<EOS>
<SOS>return 1<tab>1を関数出力とする<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>print(Fib(N))<tab>Fib(N)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>return<tab>関数処理を中断する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>print(0, 0.00000000)<tab>0と0.00000000を出力する<EOS>
<SOS>print(100.00000000, 0.00000000)<tab>100.00000000と0.00000000を出力する<EOS>
<SOS>sum = 0<tab>0をsumとする<EOS>
<SOS>for i  in range(5)  :<tab>0から5未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>score = int(input())<tab>入力された文字列の整数値をscoreとする<EOS>
<SOS>if score < 40  :<tab>scoreが40より小さいとき、<EOS>
<SOS>score = 40<tab>40をscoreとする<EOS>
<SOS>print(sum//5)<tab>sumを5で割った商を出力する<EOS>
<SOS>list_a = []<tab>空列をlist_aとする<EOS>
<SOS>list_b = []<tab>空列をlist_bとする<EOS>
<SOS>for x  in range(4)  :<tab>0から4未満までの数列の各要素を順にxとして、繰り返す<EOS>
<SOS>for x  in range(2)  :<tab>0から2未満までの数列の各要素を順にxとして、繰り返す<EOS>
<SOS>print(sum(list_a[0:3]) + list_b[0])<tab>{{list_aの位置0から位置3までの部分}}の総和にlist_bの最初値を加えた値を出力する<EOS>
<SOS>list_W = []<tab>空列をlist_Wとする<EOS>
<SOS>list_K = []<tab>空列をlist_Kとする<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>sum_W = sum(list_W[0:3])<tab>list_Wの位置0から位置3までの部分の総和をsum_Wとする<EOS>
<SOS>sum_K = sum(list_K[0:3])<tab>list_Kの位置0から位置3までの部分の総和をsum_Kとする<EOS>
<SOS>print(sum_W, sum_K)<tab>sum_Wとsum_Kを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>A = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをAとする<EOS>
<SOS>m = min(A)<tab>Aの最小値をmとする<EOS>
<SOS>M = max(A)<tab>Aの最大値をMとする<EOS>
<SOS>print(math.ceil((m + M) / 2) - m)<tab>math.ceil((m + M) / 2) からmを引いた値を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>if m == 0 and n == 0  :<tab>mが0、かつnが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>List = []<tab>空列をListとする<EOS>
<SOS>max_ans = 0<tab>0をmax_ansとする<EOS>
<SOS>sum_ans = 0<tab>0をsum_ansとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i < m  :<tab>iがmより小さいとき、<EOS>
<SOS>if i >= m - 1 and max_ans < sum_ans  :<tab>iが{{mから1を引いた値}}以上、かつmax_ansがsum_ansより小さいとき、<EOS>
<SOS>max_ans = sum_ans<tab>sum_ansをmax_ansとする<EOS>
<SOS>print(max_ans)<tab>max_ansを出力する<EOS>
<SOS>LIST = []<tab>空列をLISTとする<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(LIST[0])<tab>LISTの最初値を出力する<EOS>
<SOS>print(LIST[1])<tab>LIST(1)を出力する<EOS>
<SOS>print(LIST[2])<tab>LIST(2)を出力する<EOS>
<SOS>str_org = str(input())<tab>入力された文字列の文字列をstr_orgとする<EOS>
<SOS>print(str_org.upper())<tab>str_orgを英大文字に変換した文字列を出力する<EOS>
<SOS>str = input()<tab>入力された文字列をstrとする<EOS>
<SOS>print(str.swapcase())<tab>strの英大文字を英小文字、英小文字を英大文字に変換した文字列を出力する<EOS>
<SOS>count_char = list(0 for i in range(26))<tab>{{0から26未満までの数列}}の各要素をiとし、0の列のリストをcount_charとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>for i  in range(97, 123)  :<tab>97から123未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(chr(i), ":", count_char[i-97])<tab>文字コードiの文字、":"、count_char({{iから97を引いた値}})を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>num = input()<tab>入力された文字列をnumとする<EOS>
<SOS>if num == '0'  :<tab>numが'0'のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>num_lst = [int(i) for i in num]<tab>numの各要素をiとし、iの整数値の列をnum_lstとする<EOS>
<SOS>print(sum(num_lst))<tab>num_lstの総和を出力する<EOS>
<SOS>a = list(input())<tab>入力された文字列のリストをaとする<EOS>
<SOS>count_K = a.count("K")<tab>a内の"K"の出現をカウントした整数をcount_Kとする<EOS>
<SOS>count_P = a.count("P")<tab>a内の"P"の出現をカウントした整数をcount_Pとする<EOS>
<SOS>count_U = a.count("U")<tab>a内の"U"の出現をカウントした整数をcount_Uとする<EOS>
<SOS>count_C = a.count("C")<tab>a内の"C"の出現をカウントした整数をcount_Cとする<EOS>
<SOS>print(min(count_K, count_P, count_U, count_C))<tab>count_K、count_P、count_U、count_Cの最小値を出力する<EOS>
<SOS>W = input()<tab>入力された文字列をWとする<EOS>
<SOS>n = 0<tab>0をnとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>T = input()<tab>入力された文字列をTとする<EOS>
<SOS>if T== "END_OF_TEXT"  :<tab>Tが"END_OF_TEXT"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>small_T = list(T.split())<tab>Tを空白で分割した列のリストをsmall_Tとする<EOS>
<SOS>for i  in range(len(small_T))  :<tab>0からsmall_Tの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if str.lower(small_T[i]) == str.lower(W)  :<tab>strとsmall_T(i)を英小文字に変換した文字列がstrとWを英小文字に変換した文字列のとき、<EOS>
<SOS>print(n)<tab>nを出力する<EOS>
<SOS>s = list(input())<tab>入力された文字列のリストをsとする<EOS>
<SOS>p = list(input())<tab>入力された文字列のリストをpとする<EOS>
<SOS>for x  in range(len(p))  :<tab>0からpの長さ未満までの数列の各要素を順にxとして、繰り返す<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if p[j] == s[i]  :<tab>p(j)がs(i)のとき、<EOS>
<SOS>if j == len(p)  :<tab>jがpの長さのとき、<EOS>
<SOS>print("Yes")<tab>"Yes"を出力する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if i == len(s)  :<tab>iがsの長さのとき、<EOS>
<SOS>print("No")<tab>"No"を出力する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>a = list(input())<tab>入力された文字列のリストをaとする<EOS>
<SOS>b = list(input())<tab>入力された文字列のリストをbとする<EOS>
<SOS>for j  in range(len(a)+1-len(b))  :<tab>0から{{aの長さに1を加えた値}}からbの長さを引いた値未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>Same = True<tab>真をSameとする<EOS>
<SOS>ans = j<tab>jをansとする<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while i < len(b)  :<tab>iがbの長さより小さい間、繰り返す<EOS>
<SOS>if b[i] == a[j]  :<tab>b(i)がa(j)のとき、<EOS>
<SOS>if Same == True  :<tab>Sameが真のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>Taro_ten = 0<tab>0をTaro_tenとする<EOS>
<SOS>Hanako_ten = 0<tab>0をHanako_tenとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a, b  = list(input().split())<tab>入力された文字列を空白で分割した列のリストを展開し順にaとbとする<EOS>
<SOS>Taro = list(a)<tab>aのリストをTaroとする<EOS>
<SOS>Hanako = list(b)<tab>bのリストをHanakoとする<EOS>
<SOS>length = min(len(Taro), len(Hanako))<tab>Taroの長さとHanakoの長さの最小値をlengthとする<EOS>
<SOS>for i  in range(length)  :<tab>0からlength未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if ord(Taro[i]) > ord(Hanako[i])  :<tab>Taro(i)の順序数がHanako(i)の順序数より大きいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if i == length -1  :<tab>iがlengthから1を引いた値のとき、<EOS>
<SOS>if len(Taro) > length  :<tab>Taroの長さがlengthより大きいとき、<EOS>
<SOS>print(Taro_ten, Hanako_ten)<tab>Taro_tenとHanako_tenを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>score = input()<tab>入力された文字列をscoreとする<EOS>
<SOS>if score == "0"  :<tab>scoreが"0"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>score_a = score.count("A")<tab>score内の"A"の出現をカウントした整数をscore_aとする<EOS>
<SOS>score_b = score.count("B")<tab>score内の"B"の出現をカウントした整数をscore_bとする<EOS>
<SOS>if score[0] == "A"  :<tab>score(0)が"A"のとき、<EOS>
<SOS>if score_a > score_b  :<tab>score_aがscore_bより大きいとき、<EOS>
<SOS>print(score_a, score_b)<tab>score_aとscore_bを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>x1, y1, x2, y2  = map(float, input().split())<tab>map(float,入力された文字列を空白で分割した列)を展開し順にx1、y1、x2、y2とする<EOS>
<SOS>dist = math.sqrt((x1-x2) ** 2 + (y1-y2) ** 2)<tab>math.sqrt((x1-x2) ** 2 + (y1-y2) ** 2)をdistとする<EOS>
<SOS>print("{:.5f}".format(dist))<tab>format(dist)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>a, b, C  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、Cとする<EOS>
<SOS>S = a * b * math.sin(math.pi * C / 180) / 2<tab>{{aにbを掛けた値}}にmath.sin(math.pi * C / 180) を掛けた値を2で割った値をSとする<EOS>
<SOS>c = math.sqrt(a**2 + b**2 - 2 * a * b * math.cos(math.pi * C / 180))<tab>math.sqrt(a**2 + b**2 - 2 * a * b * math.cos(math.pi * C / 180))をcとする<EOS>
<SOS>L = a + b + c<tab>aにbを加えた値にcを加えた値をLとする<EOS>
<SOS>h = 2 * S / a<tab>2にSを掛けた値をaで割った値をhとする<EOS>
<SOS>print('{:.4f}'.format(S))<tab>format(S)を出力する<EOS>
<SOS>print('{:.4f}'.format(L))<tab>format(L)を出力する<EOS>
<SOS>print('{:.4f}'.format(h))<tab>format(h)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>s = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをsとする<EOS>
<SOS>m = sum(s) / len(s)<tab>sの総和をsの長さで割った値をmとする<EOS>
<SOS>a = 0<tab>0をaとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a = math.sqrt(a)<tab>math.sqrt(a)をaとする<EOS>
<SOS>print(a)<tab>aを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>m, f, r  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にm、f、rとする<EOS>
<SOS>if m == -1 and f == -1 and r == -1  :<tab>{{mが-1}}、かつ{{fが-1かどうか}}、かつrが-1のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if m == -1 or f == -1  :<tab>mが-1、またはfが-1のとき、<EOS>
<SOS>print("F")<tab>"F"を出力する<EOS>
<SOS>print("A")<tab>"A"を出力する<EOS>
<SOS>print("B")<tab>"B"を出力する<EOS>
<SOS>print("C")<tab>"C"を出力する<EOS>
<SOS>print("C")<tab>"C"を出力する<EOS>
<SOS>print("D")<tab>"D"を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>if n == 0 and m == 0  :<tab>nが0、かつmが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(1, n-1)  :<tab>1からnから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(i+1, n)  :<tab>iに1を加えた値からn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>for k  in range(j+1, n+1)  :<tab>jに1を加えた値からnに1を加えた値未満までの数列の各要素を順にkとして、繰り返す<EOS>
<SOS>if i + j + k == m  :<tab>{{iにjを加えた値}}にkを加えた値がmのとき、<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>card = [[False for i in range(13)] for j in range(4)]<tab>{{0から4未満までの数列}}の各要素をjとし、{{{{0から13未満までの数列}}の各要素をiとし、偽の列}}の列をcardとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>mark, suit  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にmarkとsuitとする<EOS>
<SOS>if mark == "S"  :<tab>markが"S"のとき、<EOS>
<SOS>mark_num = 0<tab>0をmark_numとする<EOS>
<SOS>mark_num = 1<tab>1をmark_numとする<EOS>
<SOS>mark_num = 2<tab>2をmark_numとする<EOS>
<SOS>mark_num = 3<tab>3をmark_numとする<EOS>
<SOS>card[mark_num][int(suit)-1]  = True<tab>真をcard[mark_num][int(suit)-1] にする<EOS>
<SOS>for j  in range(4)  :<tab>0から4未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>for i  in range(13)  :<tab>0から13未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if card[j][i] == False  :<tab>card(j)(i)が偽のとき、<EOS>
<SOS>if j == 0  :<tab>jが0のとき、<EOS>
<SOS>print("S", i+1)<tab>"S"とiに1を加えた値を出力する<EOS>
<SOS>print("H", i+1)<tab>"H"とiに1を加えた値を出力する<EOS>
<SOS>print("C", i+1)<tab>"C"とiに1を加えた値を出力する<EOS>
<SOS>print("D", i+1)<tab>"D"とiに1を加えた値を出力する<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>B = [list(map(int, input().split())) for i in range(n)]<tab>{{0からn未満までの数列}}の各要素をiとし、map(整数,{{input()を空白で分割した列}})のリストの列をBとする<EOS>
<SOS>A = [int(input()) for i in range(m)]<tab>{{0からm未満までの数列}}の各要素をiとし、入力された文字列の整数値の列をAとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for j  in range(m)  :<tab>0からm未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>n, m, l  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にn、m、lとする<EOS>
<SOS>A = [list(map(int, input().split())) for i in range(n)]<tab>{{0からn未満までの数列}}の各要素をiとし、map(整数,{{input()を空白で分割した列}})のリストの列をAとする<EOS>
<SOS>B = [list(map(int, input().split())) for i in range(m)]<tab>{{0からm未満までの数列}}の各要素をiとし、map(整数,{{input()を空白で分割した列}})のリストの列をBとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(l)  :<tab>0からl未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for k  in range(m)  :<tab>0からm未満までの数列の各要素を順にkとして、繰り返す<EOS>
<SOS>if j == l-1  :<tab>jがlから1を引いた値のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>L = []<tab>空列をLとする<EOS>
<SOS>temp = n<tab>nをtempとする<EOS>
<SOS>print(n,end="")<tab>nと((end, ""))からなる辞書を出力する<EOS>
<SOS>print(":",end="")<tab>":"と((end, ""))からなる辞書を出力する<EOS>
<SOS>for i  in range(2, int(n**(1/2)//1)+1) :<tab>2から{{nの(1/2)乗を1で割った商}}の整数値に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if temp%i==0 :<tab>tempをiで割った余りが0のとき、<EOS>
<SOS>c = 0<tab>0をcとする<EOS>
<SOS>while temp%i==0 :<tab>tempをiで割った余りが0の間、繰り返す<EOS>
<SOS>for j  in range(c) :<tab>0からc未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print("",i,end="")<tab>""、i、((end, ""))からなる辞書を出力する<EOS>
<SOS>if temp!=1 :<tab>tempが1と等しくないとき、<EOS>
<SOS>print("",temp, end="")<tab>""、temp、((end, ""))からなる辞書を出力する<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>factorization(n)<tab>factorization(n)<EOS>
<SOS>mod = 1000000007<tab>1000000007をmodとする<EOS>
<SOS>return (x % mod)<tab>(xをmodで割った余り)の組を関数出力とする<EOS>
<SOS>if b == 1  :<tab>bが1のとき、<EOS>
<SOS>return a<tab>aを関数出力とする<EOS>
<SOS>a_2 = S(a**2)<tab>S(aの2乗)をa_2とする<EOS>
<SOS>b_2 = b // 2<tab>bを2で割った商をb_2とする<EOS>
<SOS>return S(A(a_2, b_2, mod))<tab>S(A(a_2,b_2,mod))を関数出力とする<EOS>
<SOS>mod = 1000000007<tab>1000000007をmodとする<EOS>
<SOS>m, n  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にmとnとする<EOS>
<SOS>print(A(m, n, mod))<tab>A(m,n,mod)を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>x, y  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にxとyとする<EOS>
<SOS>if x == 0 and y == 0  :<tab>xが0、かつyが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if y == 0  :<tab>yが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if x < y  :<tab>xがyより小さいとき、<EOS>
<SOS>x, y = y, x<tab>xとyを入れ替える<EOS>
<SOS>x = x % y<tab>xをyで割った余りをxとする<EOS>
<SOS>x, y = y, x<tab>xとyを入れ替える<EOS>
<SOS>print(x, ans)<tab>xとansを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if a < b  :<tab>aがbより小さいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>amari = a % b<tab>aをbで割った余りをamariとする<EOS>
<SOS>if amari == 0  :<tab>amariが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>return (b)<tab>(b)の組を関数出力とする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>c = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをcとする<EOS>
<SOS>for i  in range(n-1, 0, -1)  :<tab>nから1を引いた値から0未満までの-1間隔の数列の各要素を順にiとして、繰り返す<EOS>
<SOS>c[i-1]  = int(c[i] * c[i-1] / gcd(c[i], c[i-1]))<tab>{{c(i)にc({{iから1を引いた値}})を掛けた値}}をgcd(c(i),c({{iから1を引いた値}}))で割った値の整数値をc[i-1] にする<EOS>
<SOS>print(c[0])<tab>cの最初値を出力する<EOS>
<SOS>N, M  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にNとMとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if N < M  :<tab>NがMより小さいとき、<EOS>
<SOS>N, M = M, N<tab>NとMを入れ替える<EOS>
<SOS>amari = N % M<tab>NをMで割った余りをamariとする<EOS>
<SOS>if amari == 0  :<tab>amariが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(M)<tab>Mを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>for i  in range(2, int(math.sqrt(N))+1)  :<tab>2からmath.sqrt(N)の整数値に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if N % i == 0  :<tab>Nをiで割った余りが0のとき、<EOS>
<SOS>return 'F'<tab>'F'を関数出力とする<EOS>
<SOS>return 'T'<tab>'T'を関数出力とする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for j  in range(n)  :<tab>0からn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>a = int(input())<tab>入力された文字列の整数値をaとする<EOS>
<SOS>if Sosu(a) == 'T'  :<tab>Sosu(a)が'T'のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>for i  in range(3, int(math.sqrt(n))+1, 2)  :<tab>3からmath.sqrt(n)の整数値に1を加えた値未満までの2間隔の数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if n % i == 0  :<tab>nをiで割った余りが0のとき、<EOS>
<SOS>return False<tab>偽を関数出力とする<EOS>
<SOS>return True<tab>真を関数出力とする<EOS>
<SOS>S = [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4]<tab>(0、0、1、2、2、3、3、4、4、4、4)からなる列をSとする<EOS>
<SOS>for i  in range(11, 1000000)  :<tab>11から1000000未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i % 2 == 0  :<tab>iを2で割った余りが0のとき、<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>print(S[n])<tab>S(n)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>for i  in range(2, int(math.sqrt(N))+1)  :<tab>2からmath.sqrt(N)の整数値に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if N % i == 0  :<tab>Nをiで割った余りが0のとき、<EOS>
<SOS>return False<tab>偽を関数出力とする<EOS>
<SOS>return True<tab>真を関数出力とする<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(2, a)  :<tab>2からa未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if Sosu(i)  :<tab>Sosu(i)のとき、<EOS>
<SOS>other = a - i<tab>aからiを引いた値をotherとする<EOS>
<SOS>if other >= i and Sosu(other)  :<tab>otherがi以上、かつSosu(other)のとき、<EOS>
<SOS>return count<tab>countを関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(main(n))<tab>main(n)を出力する<EOS>
<SOS>if n % 2 == 0  :<tab>nを2で割った余りが0のとき、<EOS>
<SOS>return n // 2<tab>nを2で割った商を関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>while n != 1  :<tab>nが1と等しくない間、繰り返す<EOS>
<SOS>n = Collatz(n)<tab>Collatz(n)をnとする<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>S = 0<tab>0をSとする<EOS>
<SOS>for i  in range(600//d)  :<tab>0から600をdで割った商未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(S)<tab>Sを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>q = int(input())<tab>入力された文字列の整数値をqとする<EOS>
<SOS>if q == -1  :<tab>qが-1のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>n = 1<tab>1をnとする<EOS>
<SOS>x = q / 2<tab>qを2で割った値をxとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if abs(x**3 - q) < (0.00001 * q)  :<tab>{{xの3乗からqを引いた値}}の絶対値が({{0.00001にqを掛けた値}})の組より小さいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>x = x - (x**3 - q) / (3 * x**2)<tab>xから({{xの3乗からqを引いた値}})の組を({{3にxの2乗を掛けた値}})の組で割った値を引いた値をxとする<EOS>
<SOS>print('{:.6f}'.format(x))<tab>format(x)を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>a = input()<tab>入力された文字列をaとする<EOS>
<SOS>if a == "END OF INPUT"  :<tab>aが"END OF INPUT"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>b = list(a)<tab>aのリストをbとする<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(len(b))  :<tab>0からbの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if b[i] != ' '  :<tab>b(i)が' 'と等しくないとき、<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>count_j = 0<tab>0をcount_jとする<EOS>
<SOS>count_i = 0<tab>0をcount_iとする<EOS>
<SOS>for i  in range(len(l)-2)  :<tab>'0からlの長さから2を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if l[i] == "J" and l[i+1] == "O" and l[i+2] == "I"  :<tab>{{l(i)が"J"}}、かつ{{l({{iに1を加えた値}})が"O"かどうか}}、かつl({{iに2を加えた値}})が"I"のとき、<EOS>
<SOS>if l[i] == "I" and l[i+1] == "O" and l[i+2] == "I"  :<tab>{{l(i)が"I"}}、かつ{{l({{iに1を加えた値}})が"O"かどうか}}、かつl({{iに2を加えた値}})が"I"のとき、<EOS>
<SOS>return count_j, count_i<tab>(count_jとcount_i)の組を関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>j, i  = JOIOI(l)<tab>JOIOI(l)を展開し順にjとiとする<EOS>
<SOS>print(j)<tab>jを出力する<EOS>
<SOS>print(i)<tab>iを出力する<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>pal = "True"<tab>"True"をpalとする<EOS>
<SOS>for i  in range(len(s)//2)  :<tab>0からsの長さを2で割った商未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if s[i] != s[-i-1]  :<tab>s(i)がs({{-iから1を引いた値}})と等しくないとき、<EOS>
<SOS>pal = "False"<tab>"False"をpalとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if pal == "True"  :<tab>palが"True"のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>sentence = list(input().split())<tab>入力された文字列を空白で分割した列のリストをsentenceとする<EOS>
<SOS>max_length = 0<tab>0をmax_lengthとする<EOS>
<SOS>max_sentence = ""<tab>""をmax_sentenceとする<EOS>
<SOS>count = []<tab>空列をcountとする<EOS>
<SOS>for i  in range(len(sentence))  :<tab>0からsentenceの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if max_length < len(sentence[i])  :<tab>max_lengthがsentence(i)の長さより小さいとき、<EOS>
<SOS>max_length = len(sentence[i])<tab>sentence(i)の長さをmax_lengthとする<EOS>
<SOS>max_sentence = sentence[i]<tab>sentence(i)をmax_sentenceとする<EOS>
<SOS>new_word = False<tab>偽をnew_wordとする<EOS>
<SOS>for j  in range(len(count))  :<tab>0からcountの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if count[j][0] == sentence[i]  :<tab>count(j)(0)がsentence(i)のとき、<EOS>
<SOS>new_word = True<tab>真をnew_wordとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if new_word == False  :<tab>new_wordが偽のとき、<EOS>
<SOS>count = sorted(count, key = itemgetter(1), reverse = True)<tab>countと((key, itemgetter(1))と(reverse, 真))からなる辞書をソートした列をcountとする<EOS>
<SOS>print(count[0][0], max_sentence)<tab>countの最初値の最初値とmax_sentenceを出力する<EOS>
<SOS>A = list(input().split())<tab>入力された文字列を空白で分割した列のリストをAとする<EOS>
<SOS>for i  in range(len(A))  :<tab>0からAの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if "apple" in A[i]  :<tab>"apple"がA(i)に含まれるとき、<EOS>
<SOS>A[i]  = A[i].replace("apple", "peach")<tab>A(i)内の"apple"を"peach"で置き換えた文字列をA[i] にする<EOS>
<SOS>A[i]  = A[i].replace("peach", "apple")<tab>A(i)内の"peach"を"apple"で置き換えた文字列をA[i] にする<EOS>
<SOS>print(" ".join(A))<tab>Aを文字列" "で連結した文字列を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>hit = 0<tab>0をhitとする<EOS>
<SOS>brow = 0<tab>0をbrowとする<EOS>
<SOS>if a1 == b1  :<tab>a1がb1のとき、<EOS>
<SOS>if a2 == b2  :<tab>a2がb2のとき、<EOS>
<SOS>if a3 == b3  :<tab>a3がb3のとき、<EOS>
<SOS>if a4 == b4  :<tab>a4がb4のとき、<EOS>
<SOS>if a1 == b2 or a1 == b3 or a1 == b4  :<tab>{{a1がb2}}、または{{a1がb3かどうか}}、またはa1がb4のとき、<EOS>
<SOS>if a2 == b1 or a2 == b3 or a2 == b4  :<tab>{{a2がb1}}、または{{a2がb3かどうか}}、またはa2がb4のとき、<EOS>
<SOS>if a3 == b1 or a3 == b2 or a3 == b4  :<tab>{{a3がb1}}、または{{a3がb2かどうか}}、またはa3がb4のとき、<EOS>
<SOS>if a4 == b1 or a4 == b2 or a4 == b3  :<tab>{{a4がb1}}、または{{a4がb2かどうか}}、またはa4がb3のとき、<EOS>
<SOS>print(hit, brow)<tab>hitとbrowを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(1, n)  :<tab>1からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>s = 0<tab>0をsとする<EOS>
<SOS>for j  in range(i, n)  :<tab>iからn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if s == n  :<tab>sがnのとき、<EOS>
<SOS>if s > n  :<tab>sがnより大きいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>ans = []<tab>空列をansとする<EOS>
<SOS>for i  in range(1, s)  :<tab>1からs未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>i_tax = int(i + i*x/100)<tab>iに{{{{iにxを掛けた値}}を100で割った値}}を加えた値の整数値をi_taxとする<EOS>
<SOS>for j  in range(1, s)  :<tab>1からs未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>j_tax = int(j + j*x/100)<tab>jに{{{{jにxを掛けた値}}を100で割った値}}を加えた値の整数値をj_taxとする<EOS>
<SOS>if i_tax + j_tax > s  :<tab>i_taxにj_taxを加えた値がsより大きいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if i_tax + j_tax == s  :<tab>i_taxにj_taxを加えた値がsのとき、<EOS>
<SOS>return ans<tab>ansを関数出力とする<EOS>
<SOS>ans = int(i + i*y/100) + int(j + j*y/100)<tab>{{iに{{{{iにyを掛けた値}}を100で割った値}}を加えた値}}の整数値に{{jに{{{{jにyを掛けた値}}を100で割った値}}を加えた値}}の整数値を加えた値をansとする<EOS>
<SOS>return ans<tab>ansを関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>x, y, s  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にx、y、sとする<EOS>
<SOS>if x == 0 and y == 0  :<tab>xが0、かつyが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>lst = calc_before(x, s)<tab>calc_before(x,s)をlstとする<EOS>
<SOS>max_price = 0<tab>0をmax_priceとする<EOS>
<SOS>for i  in range(len(lst))  :<tab>0からlstの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>price = calc_after(lst[i][0], lst[i][1], y)<tab>calc_after(lst(i)の最初値,lst(i)(1),y)をpriceとする<EOS>
<SOS>max_price = max(price, max_price)<tab>priceとmax_priceの最大値をmax_priceとする<EOS>
<SOS>print(max_price)<tab>max_priceを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>if n == 0 and m == 0  :<tab>nが0、かつmが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>catalog = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをcatalogとする<EOS>
<SOS>max_p = 0<tab>0をmax_pとする<EOS>
<SOS>for i  in range(n-1)  :<tab>0からnから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(1, n)  :<tab>1からn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if i != j  :<tab>iがjと等しくないとき、<EOS>
<SOS>x = catalog[i] + catalog[j]<tab>catalog(i)にcatalog(j)を加えた値をxとする<EOS>
<SOS>if x <= m and x > max_p  :<tab>xがm以下、かつxがmax_pより大きいとき、<EOS>
<SOS>max_p = x<tab>xをmax_pとする<EOS>
<SOS>if max_p == 0  :<tab>max_pが0のとき、<EOS>
<SOS>print("NONE")<tab>"NONE"を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>lst = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをlstとする<EOS>
<SOS>ave_lst = sum(lst) / len(lst)<tab>lstの総和をlstの長さで割った値をave_lstとする<EOS>
<SOS>Sum = 0<tab>0をSumとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if lst[i] <= ave_lst  :<tab>lst(i)がave_lst以下のとき、<EOS>
<SOS>print(Sum)<tab>Sumを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>if N == 1  :<tab>Nが1のとき、<EOS>
<SOS>return False<tab>偽を関数出力とする<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for i  in range(a+1, b+1)  :<tab>aに1を加えた値からbに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if Sosu(i)  :<tab>Sosu(i)のとき、<EOS>
<SOS>return ans<tab>ansを関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(amount_sosu(n, n*2))<tab>amount_sosu(n,{{nに2を掛けた値}})を出力する<EOS>
<SOS>n, t, e  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にn、t、eとする<EOS>
<SOS>watch = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをwatchとする<EOS>
<SOS>ans = False<tab>偽をansとする<EOS>
<SOS>for w  in range(n)  :<tab>0からn未満までの数列の各要素を順にwとして、繰り返す<EOS>
<SOS>for i  in range(e+1)  :<tab>0からeに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if (t+i) % watch[w] == 0  :<tab>({{tにiを加えた値}})の組をwatch(w)で割った余りが0のとき、<EOS>
<SOS>ans = True<tab>真をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if (t-i) % watch[w] == 0  :<tab>({{tからiを引いた値}})の組をwatch(w)で割った余りが0のとき、<EOS>
<SOS>ans = True<tab>真をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if ans == True  :<tab>ansが真のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if ans == True  :<tab>ansが真のとき、<EOS>
<SOS>print(w+1)<tab>wに1を加えた値を出力する<EOS>
<SOS>d, l  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にdとlとする<EOS>
<SOS>s = int(d / l + d % l)<tab>{{dをlで割った値}}に{{dをlで割った余り}}を加えた値の整数値をsとする<EOS>
<SOS>print(s)<tab>sを出力する<EOS>
<SOS>if d == 0  :<tab>dが0のとき、<EOS>
<SOS>new_i = square[n][0] - 1<tab>square(n)(0)から1を引いた値をnew_iとする<EOS>
<SOS>new_j = square[n][1]<tab>square(n)(1)をnew_jとする<EOS>
<SOS>new_i = square[n][0]<tab>square(n)の最初値をnew_iとする<EOS>
<SOS>new_j = square[n][1] - 1<tab>square(n)(1)から1を引いた値をnew_jとする<EOS>
<SOS>new_i = square[n][0] + 1<tab>square(n)(0)に1を加えた値をnew_iとする<EOS>
<SOS>new_j = square[n][1]<tab>square(n)(1)をnew_jとする<EOS>
<SOS>new_i = square[n][0]<tab>square(n)の最初値をnew_iとする<EOS>
<SOS>new_j = square[n][1] + 1<tab>square(n)(1)に1を加えた値をnew_jとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>if N == 0  :<tab>Nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>square = [[0, 0]]<tab>((0と0)からなる列)からなる列をsquareとする<EOS>
<SOS>for i  in range(N-1)  :<tab>0からNから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>n, d  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとdとする<EOS>
<SOS>sort_x_square = sorted(square)<tab>squareをソートした列をsort_x_squareとする<EOS>
<SOS>print(sort_x_square[-1][0] - sort_x_square[0][0]+1, sort_y_square[-1][1] - sort_y_square[0][1]+1)<tab>{{sort_x_squareの末尾値(0)からsort_x_squareの最初値の最初値を引いた値}}に1を加えた値と{{sort_y_squareの末尾値(1)からsort_y_squareの最初値(1)を引いた値}}に1を加えた値を出力する<EOS>
<SOS>new = []<tab>空列をnewとする<EOS>
<SOS>re_a = list(reversed(a))<tab>aを反転した列のリストをre_aとする<EOS>
<SOS>re_b = list(reversed(b))<tab>bを反転した列のリストをre_bとする<EOS>
<SOS>return list(set(new))<tab>newの集合のリストを関数出力とする<EOS>
<SOS>m = int(input())<tab>入力された文字列の整数値をmとする<EOS>
<SOS>for i  in range(m)  :<tab>0からm未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>train = list(input())<tab>入力された文字列のリストをtrainとする<EOS>
<SOS>new_train = []<tab>空列をnew_trainとする<EOS>
<SOS>for j  in range(1, len(train))  :<tab>1からtrainの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>pre_train = train[:j]<tab>trainの位置先頭から位置jまでの部分をpre_trainとする<EOS>
<SOS>bk_train = train[j:]<tab>trainの先頭j個を取り除いた部分をbk_trainとする<EOS>
<SOS>new_train = new_train + rename(pre_train, bk_train)<tab>new_trainにrename(pre_train,bk_train)を加えた値をnew_trainとする<EOS>
<SOS>print(len(list(set(new_train))))<tab>new_trainの集合のリストの長さを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>s = input()<tab>入力された文字列をsとする<EOS>
<SOS>tmp = []<tab>空列をtmpとする<EOS>
<SOS>if s == '.'  :<tab>sが'.'のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>ans = True<tab>真をansとする<EOS>
<SOS>for i  in range(len(s))  :<tab>0からsの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if s[i] == '('  :<tab>s(i)が'('のとき、<EOS>
<SOS>if '(' not in tmp  :<tab>not in('(',tmp)のとき、<EOS>
<SOS>ans = False<tab>偽をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if '[' not in tmp  :<tab>not in('[',tmp)のとき、<EOS>
<SOS>ans = False<tab>偽をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>elif tmp[-1] == '['  :<tab>("tmp(-1)が'['の",)<EOS>
<SOS>if len(tmp) != 0 or ans == False  :<tab>tmpの長さが0と等しくなく、またはansが偽のとき、<EOS>
<SOS>print('no')<tab>'no'を出力する<EOS>
<SOS>pas = input()<tab>入力された文字列をpasとする<EOS>
<SOS>if len(pas) < 6  :<tab>pasの長さが6より小さいとき、<EOS>
<SOS>print("INVALID")<tab>"INVALID"を出力する<EOS>
<SOS>tmp = 0<tab>0をtmpとする<EOS>
<SOS>for i  in range(11)  :<tab>0から11未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i <= 4  :<tab>iが4以下のとき、<EOS>
<SOS>tmp = tmp % 11<tab>tmpを11で割った余りをtmpとする<EOS>
<SOS>if tmp <= 1  :<tab>tmpが1以下のとき、<EOS>
<SOS>return 0<tab>0を関数出力とする<EOS>
<SOS>m = list(input())<tab>入力された文字列のリストをmとする<EOS>
<SOS>if m[11] == '?'  :<tab>m(11)が'?'のとき、<EOS>
<SOS>print(CheckDisit(m))<tab>CheckDisit(m)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>color = [[0, 0, 0], [0, 0, 255], [0, 255, 0], [0, 255, 255], [255, 0, 0], [255, 0, 255], [255, 255, 0], [255, 255, 255]]<tab>((0、0、0)からなる列、(0、0、255)からなる列、(0、255、0)からなる列、(0、255、255)からなる列、(255、0、0)からなる列、(255、0、255)からなる列、(255、255、0)からなる列、(255、255、255)からなる列)からなる列をcolorとする<EOS>
<SOS>color_16 = input()<tab>入力された文字列をcolor_16とする<EOS>
<SOS>if color_16 == "0"  :<tab>color_16が"0"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>color_R = int(color_16[1] + color_16[2], 16)<tab>16進数文字列color_16(1)にcolor_16(2)を加えた値の整数値をcolor_Rとする<EOS>
<SOS>color_G = int(color_16[3] + color_16[4], 16)<tab>16進数文字列color_16(3)にcolor_16(4)を加えた値の整数値をcolor_Gとする<EOS>
<SOS>color_B = int(color_16[5] + color_16[6], 16)<tab>16進数文字列color_16(5)にcolor_16(6)を加えた値の整数値をcolor_Bとする<EOS>
<SOS>min_d = 500<tab>500をmin_dとする<EOS>
<SOS>for i  in range(8)  :<tab>0から8未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>R = color[i][0]<tab>color(i)の最初値をRとする<EOS>
<SOS>G = color[i][1]<tab>color(i)(1)をGとする<EOS>
<SOS>B = color[i][2]<tab>color(i)(2)をBとする<EOS>
<SOS>d = math.sqrt((R - color_R)**2 + (G - color_G)**2 + (B - color_B)**2)<tab>math.sqrt((R - color_R)**2 + (G - color_G)**2 + (B - color_B)**2)をdとする<EOS>
<SOS>if min_d > d  :<tab>min_dがdより大きいとき、<EOS>
<SOS>min_d = d<tab>dをmin_dとする<EOS>
<SOS>color_num = i<tab>iをcolor_numとする<EOS>
<SOS>if color_num == 0  :<tab>color_numが0のとき、<EOS>
<SOS>print("black")<tab>"black"を出力する<EOS>
<SOS>print("blue")<tab>"blue"を出力する<EOS>
<SOS>print("lime")<tab>"lime"を出力する<EOS>
<SOS>print("aqua")<tab>"aqua"を出力する<EOS>
<SOS>print("red")<tab>"red"を出力する<EOS>
<SOS>print("fuchsia")<tab>"fuchsia"を出力する<EOS>
<SOS>print("yellow")<tab>"yellow"を出力する<EOS>
<SOS>tanni = ['Man', 'Oku', 'Cho', 'Kei', 'Gai', 'Jo', 'Jou', 'Ko', 'Kan', 'Sei',<tab>('Man'、'Oku'、'Cho'、'Kei'、'Gai'、'Jo'、'Jou'、'Ko'、'Kan'、'Sei'、'Sai'、'Gok'、'Ggs'、'Asg'、'Nyt'、'Fks'、'Mts'、'end')からなる列をtanniとする<EOS>
<SOS>', 'Gok', 'Ggs', 'Asg', 'Nyt', 'Fks', 'Mts' , 'end']<tab>, 'Gok', 'Ggs', 'Asg', 'Nyt', 'Fks', 'Mts' , 'end']<EOS><EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>m, n  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にmとnとする<EOS>
<SOS>if m == 0 and n == 0  :<tab>mが0、かつnが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>s = m**n<tab>mのn乗をsとする<EOS>
<SOS>ans = []<tab>空列をansとする<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>s = s // 10**4<tab>sを10の4乗で割った商をsとする<EOS>
<SOS>if s == 0  :<tab>sが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if tanni[i] != 'end'  :<tab>tanni(i)が'end'と等しくないとき、<EOS>
<SOS>switch = False<tab>偽をswitchとする<EOS>
<SOS>for j  in range(len(ans))  :<tab>0からansの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if ans[j] == 0  :<tab>ans(j)が0のとき、<EOS>
<SOS>switch = True<tab>真をswitchとする<EOS>
<SOS>if switch == True  :<tab>switchが真のとき、<EOS>
<SOS>switch = False<tab>偽をswitchとする<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if siki[j] == '*'  :<tab>siki(j)が'*'のとき、<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) * int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値にsiki({{jに1を加えた値}})の整数値を掛けた値の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>if (int(siki[j-1]) < 0 and int(siki[j+1]) < 0) or (int(siki[j-1]) >= 0 and int(siki[j+1]) >= 0)  :<tab>({{siki[j-1]の整数値が0より小さく}}、かつ{{siki[j+1]の整数値が0より小さいかどうか}})の組、または({{siki[j-1]の整数値が0以上}}、かつ{{siki[j+1]の整数値が0以上かどうか}})の組のとき、<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) // int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値をsiki({{jに1を加えた値}})の整数値で割った商の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>if len(siki) == 1  :<tab>sikiの長さが1のとき、<EOS>
<SOS>return (siki[0])<tab>(sikiの最初値)の組を関数出力とする<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if '+' not in siki and '-' not in siki :<tab>not in('+',siki)、かつnot in('-',siki)のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if siki[j] == '+'  :<tab>siki(j)が'+'のとき、<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) + int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値にsiki({{jに1を加えた値}})の整数値を加えた値の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) - int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値からsiki({{jに1を加えた値}})の整数値を引いた値の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>if len(siki) == 1  :<tab>sikiの長さが1のとき、<EOS>
<SOS>return (siki[0])<tab>(sikiの最初値)の組を関数出力とする<EOS>
<SOS>siki = calc_zyouzyo(siki)<tab>calc_zyouzyo(siki)をsikiとする<EOS>
<SOS>siki = calc_kagen(siki)<tab>calc_kagen(siki)をsikiとする<EOS>
<SOS>return (siki)<tab>(siki)の組を関数出力とする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>tmp = list(input())<tab>入力された文字列のリストをtmpとする<EOS>
<SOS>siki = []<tab>空列をsikiとする<EOS>
<SOS>num = ''<tab>''をnumとする<EOS>
<SOS>for j  in range(len(tmp))  :<tab>0からtmpの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if tmp[j] in ['*', '/', '+', '-', '(', ')', '=']  :<tab>tmp(j)が('*'、'/'、'+'、'-'、'('、')'、'=')からなる列に含まれるとき、<EOS>
<SOS>if num != ''  :<tab>numが''と等しくないとき、<EOS>
<SOS>num = ''<tab>''をnumとする<EOS>
<SOS>siki.remove('=')<tab>sikiから'='を取り除いた集まり<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if j == len(siki) or ')' not in siki :<tab>jがsikiの長さ、またはnot in(')',siki)のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>stack = []<tab>空列をstackとする<EOS>
<SOS>if siki[j] == ')'  :<tab>siki(j)が')'のとき、<EOS>
<SOS>for k  in range(j-1,-1, -1)  :<tab>jから1を引いた値から-1未満までの-1間隔の数列の各要素を順にkとして、繰り返す<EOS>
<SOS>if siki[k] == '('  :<tab>siki(k)が'('のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>siki[k]  = calc(stack)<tab>calc(stack)をsiki[k] にする<EOS>
<SOS>del siki[k+1 : j+1]<tab>sikiの位置kに1を加えた値から位置jに1を加えた値までの部分を削除する<EOS>
<SOS>j = k+1<tab>kに1を加えた値をjとする<EOS>
<SOS>siki = calc(siki)<tab>calc(siki)をsikiとする<EOS>
<SOS>print(siki)<tab>sikiを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while i < len(s)  :<tab>iがsの長さより小さい間、繰り返す<EOS>
<SOS>if s[i] == "@"  :<tab>s(i)が"@"のとき、<EOS>
<SOS>for j  in range(int(s[i+1]))  :<tab>0からs({{iに1を加えた値}})の整数値未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>H, A, B  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にH、A、Bとする<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for i  in range(A, B+1)  :<tab>AからBに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if H % i == 0  :<tab>Hをiで割った余りが0のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>cnt = 0<tab>0をcntとする<EOS>
<SOS>for a  in range(10)  :<tab>0から10未満までの数列の各要素を順にaとして、繰り返す<EOS>
<SOS>for b  in range(10)  :<tab>0から10未満までの数列の各要素を順にbとして、繰り返す<EOS>
<SOS>for c  in range(10)  :<tab>0から10未満までの数列の各要素を順にcとして、繰り返す<EOS>
<SOS>for d  in range(10)  :<tab>0から10未満までの数列の各要素を順にdとして、繰り返す<EOS>
<SOS>if a + b + c + d == n  :<tab>{{{{aにbを加えた値}}にcを加えた値}}にdを加えた値がnのとき、<EOS>
<SOS>print(cnt)<tab>cntを出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>v = int(input())<tab>入力された文字列の整数値をvとする<EOS>
<SOS>maxv = v<tab>vをmaxvとする<EOS>
<SOS>minv = v<tab>vをminvとする<EOS>
<SOS>rieki = -(10**9)<tab>-(10の9乗)の組をriekiとする<EOS>
<SOS>for i  in range(n-1)  :<tab>0からnから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>v = int(input())<tab>入力された文字列の整数値をvとする<EOS>
<SOS>if rieki < v - minv  :<tab>riekiがvからminvを引いた値より小さいとき、<EOS>
<SOS>rieki = v - minv<tab>vからminvを引いた値をriekiとする<EOS>
<SOS>if minv > v  :<tab>minvがvより大きいとき、<EOS>
<SOS>minv = v<tab>vをminvとする<EOS>
<SOS>print(rieki)<tab>riekiを出力する<EOS>
<SOS>stack = []<tab>空列をstackとする<EOS>
<SOS>lst = input().split()<tab>入力された文字列を空白で分割した列をlstとする<EOS>
<SOS>for i  in range(len(lst))  :<tab>0からlstの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if lst[i] in ['+', '-', '*', '/']  :<tab>lst(i)が('+'、'-'、'*'、'/')からなる列に含まれるとき、<EOS>
<SOS>if lst[i] == '+'  :<tab>lst(i)が'+'のとき、<EOS>
<SOS>print(stack[0])<tab>stackの最初値を出力する<EOS>
<SOS>n, q  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとqとする<EOS>
<SOS>process = []<tab>空列をprocessとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>name, time  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にnameとtimeとする<EOS>
<SOS>time = 0<tab>0をtimeとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if len(process) == 0  :<tab>processの長さが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if process[0][1] > q  :<tab>processの最初値(1)がqより大きいとき、<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>S = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをSとする<EOS>
<SOS>q = int(input())<tab>入力された文字列の整数値をqとする<EOS>
<SOS>T = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをTとする<EOS>
<SOS>cnt = 0<tab>0をcntとする<EOS>
<SOS>for i  in range(q)  :<tab>0からq未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if T[i] in S  :<tab>T(i)がSに含まれるとき、<EOS>
<SOS>print(cnt)<tab>cntを出力する<EOS>
<SOS>if j-1 >= 0  :<tab>jから1を引いた値が0以上のとき、<EOS>
<SOS>if A[i][j-1] == "."  :<tab>A(i)({{jから1を引いた値}})が"."のとき、<EOS>
<SOS>A[i][j-1]  = "+"<tab>"+"をA[i][j-1] にする<EOS>
<SOS>Check(A, i, j-1, W, H)<tab>Check(A,i,jから1を引いた値,W,H)<EOS>
<SOS>if i+1 < H  :<tab>iに1を加えた値がHより小さいとき、<EOS>
<SOS>if A[i+1][j] == "."  :<tab>A({{iに1を加えた値}})(j)が"."のとき、<EOS>
<SOS>A[i+1][j] = "+"<tab>"+"をA[i+1][j]にする<EOS>
<SOS>Check(A, i+1, j, W, H)<tab>Check(A,iに1を加えた値,j,W,H)<EOS>
<SOS>if j+1 < W  :<tab>jに1を加えた値がWより小さいとき、<EOS>
<SOS>if A[i][j+1] == "."  :<tab>A(i)({{jに1を加えた値}})が"."のとき、<EOS>
<SOS>A[i][j+1]  = "+"<tab>"+"をA[i][j+1] にする<EOS>
<SOS>Check(A, i, j+1, W, H)<tab>Check(A,i,jに1を加えた値,W,H)<EOS>
<SOS>if i-1 >= 0  :<tab>iから1を引いた値が0以上のとき、<EOS>
<SOS>if A[i-1][j] == "."  :<tab>A({{iから1を引いた値}})(j)が"."のとき、<EOS>
<SOS>A[i-1][j]  = "+"<tab>"+"をA[i-1][j] にする<EOS>
<SOS>Check(A, i-1, j, W, H)<tab>Check(A,iから1を引いた値,j,W,H)<EOS>
<SOS>return (A)<tab>(A)の組を関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>W, H  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にWとHとする<EOS>
<SOS>if W == 0 and H == 0  :<tab>Wが0、かつHが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>Tile = [list(input()) for i in range(H)]<tab>{{0からH未満までの数列}}の各要素をiとし、入力された文字列のリストの列をTileとする<EOS>
<SOS>for i  in range(H)  :<tab>0からH未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(W)  :<tab>0からW未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if Tile[i][j] == "@"  :<tab>Tile(i)(j)が"@"のとき、<EOS>
<SOS>my_i = i<tab>iをmy_iとする<EOS>
<SOS>my_j = j<tab>jをmy_jとする<EOS>
<SOS>Tile[my_i][my_j]  = "+"<tab>"+"をTile[my_i][my_j] にする<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(H)  :<tab>0からH未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(W)  :<tab>0からW未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if Tile_new[i][j] == "+"  :<tab>Tile_new(i)(j)が"+"のとき、<EOS>
<SOS>print(count<tab>countを出力する<EOS>
<SOS>print("Hello World")<tab>"Hello World"を出力する<EOS>
<SOS>x = int(input())<tab>入力された文字列の整数値をxとする<EOS>
<SOS>print(x**3)<tab>xの3乗を出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>print(n * 32)<tab>nに32を掛けた値を出力する<EOS>
<SOS>x = int(input())<tab>入力された文字列の整数値をxとする<EOS>
<SOS>print(int((x-30) / 2))<tab>{{({{xから30を引いた値}})の組を2で割った値}}の整数値を出力する<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>print(a+b+c)<tab>{{aにbを加えた値}}にcを加えた値を出力する<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(a*b, (a+b)*2)<tab>aにbを掛けた値と({{aにbを加えた値}})の組に2を掛けた値を出力する<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>print("a > b")<tab>"a > b"を出力する<EOS>
<SOS>print("a < b")<tab>"a < b"を出力する<EOS>
<SOS>a, b = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(int((a+b)/2))<tab>{{({{aにbを加えた値}})の組を2で割った値}}の整数値を出力する<EOS>
<SOS>a, b = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>if b > a  :<tab>bがaより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>print(a - b)<tab>aからbを引いた値を出力する<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>if c == 1  :<tab>cが1のとき、<EOS>
<SOS>print("Open")<tab>"Open"を出力する<EOS>
<SOS>print("Open")<tab>"Open"を出力する<EOS>
<SOS>time = int(input())<tab>入力された文字列の整数値をtimeとする<EOS>
<SOS>H = time//3600<tab>timeを3600で割った商をHとする<EOS>
<SOS>M = time%3600<tab>timeを3600で割った余りをMとする<EOS>
<SOS>S = M%60<tab>Mを60で割った余りをSとする<EOS>
<SOS>M = M//60<tab>Mを60で割った商をMとする<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>d = int(a / b)<tab>aをbで割った値の整数値をdとする<EOS>
<SOS>e = a % b<tab>aをbで割った余りをeとする<EOS>
<SOS>f = a / b<tab>aをbで割った値をfとする<EOS>
<SOS>print("{0} {1} {2:.5f}".format(d, e, f))<tab>format(d,e,f)を出力する<EOS>
<SOS>pi = 3.141592653589<tab>3.141592653589をpiとする<EOS>
<SOS>r = float(input())<tab>入力された文字列の浮動小数点数値をrとする<EOS>
<SOS>a = r * r * pi<tab>rにrを掛けた値にpiを掛けた値をaとする<EOS>
<SOS>b = r * 2 * pi<tab>rに2を掛けた値にpiを掛けた値をbとする<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>print(a * b / 3.305785)<tab>{{aにbを掛けた値}}を3.305785で割った値を出力する<EOS>
<SOS>a, b,c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>if b > c  :<tab>bがcより大きいとき、<EOS>
<SOS>b, c = c, b<tab>bとcを入れ替える<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>print(a, b, c)<tab>a、b、cを出力する<EOS>
<SOS>e1, e2, e3, e4  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にe1、e2、e3、e4とする<EOS>
<SOS>if e1 == e2 and e3 == e4 or e1 == e3 and e2 == e4 or e1 == e4 and e2 == e3  :<tab>{{e1がe2}}、かつ{{e3がe4かどうか}}、または{{e1がe3}}、かつ{{e2がe4かどうか}}、または{{e1がe4}}、かつ{{e2がe3かどうか}}のとき、<EOS>
<SOS>print("yes")<tab>"yes"を出力する<EOS>
<SOS>N, A, B, C, D  = map(int, input().split())[#Document [# '# setX']]<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にN、A、B、C、Dとする<EOS>
<SOS>if N % A == 0  :<tab>NをAで割った余りが0のとき、<EOS>
<SOS>X = N // A * B<tab>NをAで割った商にBを掛けた値をXとする<EOS>
<SOS>if N % C == 0  :<tab>NをCで割った余りが0のとき、<EOS>
<SOS>Y = N // C * D<tab>NをCで割った商にDを掛けた値をYとする<EOS>
<SOS>print(min(X, Y))<tab>XとYの最小値を出力する<EOS>
<SOS>A, B, C  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にA、B、Cとする<EOS>
<SOS>coin = 0<tab>0をcoinとする<EOS>
<SOS>day = 1<tab>1をdayとする<EOS>
<SOS>while coin < C  :<tab>coinがCより小さい間、繰り返す<EOS>
<SOS>if day % 7 == 0  :<tab>dayを7で割った余りが0のとき、<EOS>
<SOS>print(day-1)<tab>dayから1を引いた値を出力する<EOS>
<SOS>n = 1000<tab>1000をnとする<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while i < n  :<tab>iがnより小さい間、繰り返す<EOS>
<SOS>print("Hello World")<tab>"Hello World"を出力する<EOS>
<SOS>i = i + 1<tab>iに1を加えた値をiとする<EOS>
<SOS>if t == 1  :<tab>tが1のとき、<EOS>
<SOS>return 6000<tab>6000を関数出力とする<EOS>
<SOS>return 4000<tab>4000を関数出力とする<EOS>
<SOS>return 3000<tab>3000を関数出力とする<EOS>
<SOS>return 2000<tab>2000を関数出力とする<EOS>
<SOS>t1, n1  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt1とn1とする<EOS>
<SOS>t2, n2  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt2とn2とする<EOS>
<SOS>t3, n3  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt3とn3とする<EOS>
<SOS>t4, n4  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にt4とn4とする<EOS>
<SOS>print(change(t1) * n1)<tab>change(t1)にn1を掛けた値を出力する<EOS>
<SOS>print(change(t2) * n2)<tab>change(t2)にn2を掛けた値を出力する<EOS>
<SOS>print(change(t3) * n3)<tab>change(t3)にn3を掛けた値を出力する<EOS>
<SOS>print(change(t4) * n4)<tab>change(t4)にn4を掛けた値を出力する<EOS>
<SOS>for i  in range(7)  :<tab>0から7未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>hi, low  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にhiとlowとする<EOS>
<SOS>print(hi - low)<tab>hiからlowを引いた値を出力する<EOS>
<SOS>for i  in range(9)  :<tab>0から9未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>name, a, b  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にname、a、bとする<EOS>
<SOS>print(name, int(a)+int(b), 200*int(a)+300*int(b))<tab>name、aの整数値にbの整数値を加えた値、{{200にaの整数値を掛けた値}}に{{300にbの整数値を掛けた値}}を加えた値を出力する<EOS>
<SOS>sum = 0<tab>0をsumとする<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(sum)<tab>sumを出力する<EOS>
<SOS>i = 1<tab>1をiとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>x = int(input())<tab>入力された文字列の整数値をxとする<EOS>
<SOS>if x == 0  :<tab>xが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>i = i + 1<tab>iに1を加えた値をiとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>a, b  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にaとbとする<EOS>
<SOS>if a == 0 and b == 0  :<tab>aが0、かつbが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if a > b  :<tab>aがbより大きいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>print(a, b)<tab>aとbを出力する<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>for i  in range(N)  :<tab>0からN未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a, b, c  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、cとする<EOS>
<SOS>if a**2 == b**2 + c**2 or b**2 == c**2 + a**2 or c**2 == a**2 + b**2  :<tab>{{aの2乗が{{bの2乗にcの2乗を加えた値}}}}、または{{bの2乗が{{cの2乗にaの2乗を加えた値}}かどうか}}、またはcの2乗が{{aの2乗にbの2乗を加えた値}}のとき、<EOS>
<SOS>print("YES")<tab>"YES"を出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>S = 100000<tab>100000をSとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if S % 1000 != 0  :<tab>Sを1000で割った余りが0と等しくないとき、<EOS>
<SOS>S = (int(S / 1000) + 1) * 1000<tab>({{{{Sを1000で割った値}}の整数値に1を加えた値}})の組に1000を掛けた値をSとする<EOS>
<SOS>print(S)<tab>Sを出力する<EOS>
<SOS>for i  in range(1, 10)  :<tab>1から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(1, 10)  :<tab>1から10未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>H, W  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にHとWとする<EOS>
<SOS>if H == 0 and W == 0  :<tab>Hが0、かつWが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>for h  in range(H)  :<tab>0からH未満までの数列の各要素を順にhとして、繰り返す<EOS>
<SOS>for w  in range(W)  :<tab>0からW未満までの数列の各要素を順にwとして、繰り返す<EOS>
<SOS>if (h + w) % 2 == 0  :<tab>({{hにwを加えた値}})の組を2で割った余りが0のとき、<EOS>
<SOS>print("#", end="")<tab>"#"と((end, ""))からなる辞書を出力する<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>a, op, b  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にa、op、bとする<EOS>
<SOS>a = int(a)<tab>aの整数値をaとする<EOS>
<SOS>b = int(b)<tab>bの整数値をbとする<EOS>
<SOS>if op == "?"  :<tab>opが"?"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(a + b)<tab>aにbを加えた値を出力する<EOS>
<SOS>print(a - b)<tab>aからbを引いた値を出力する<EOS>
<SOS>print(int(a / b))<tab>{{aをbで割った値}}の整数値を出力する<EOS>
<SOS>print(a * b)<tab>aにbを掛けた値を出力する<EOS>
<SOS>n = input()<tab>入力された文字列をnとする<EOS>
<SOS>l = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをlとする<EOS>
<SOS>print(min(l), max(l), sum(l))<tab>lの最小値、lの最大値、lの総和を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>if N == 0  :<tab>Nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>data = list(int(input()) for i in range(N))<tab>{{0からN未満までの数列}}の各要素をiとし、入力された文字列の整数値の列のリストをdataとする<EOS>
<SOS>del data[0]<tab>dataの最初値を削除する<EOS>
<SOS>del data[-1]<tab>dataの末尾値を削除する<EOS>
<SOS>data_ave = sum(data)/len(data)<tab>dataの総和をdataの長さで割った値をdata_aveとする<EOS>
<SOS>print(int(data_ave))<tab>data_aveの整数値を出力する<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>return 1<tab>1を関数出力とする<EOS>
<SOS>return 1<tab>1を関数出力とする<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>print(Fib(N))<tab>Fib(N)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>return<tab>関数処理を中断する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>print(0, 0.00000000)<tab>0と0.00000000を出力する<EOS>
<SOS>print(100.00000000, 0.00000000)<tab>100.00000000と0.00000000を出力する<EOS>
<SOS>sum = 0<tab>0をsumとする<EOS>
<SOS>for i  in range(5)  :<tab>0から5未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>score = int(input())<tab>入力された文字列の整数値をscoreとする<EOS>
<SOS>if score < 40  :<tab>scoreが40より小さいとき、<EOS>
<SOS>score = 40<tab>40をscoreとする<EOS>
<SOS>print(sum//5)<tab>sumを5で割った商を出力する<EOS>
<SOS>list_a = []<tab>空列をlist_aとする<EOS>
<SOS>list_b = []<tab>空列をlist_bとする<EOS>
<SOS>for x  in range(4)  :<tab>0から4未満までの数列の各要素を順にxとして、繰り返す<EOS>
<SOS>for x  in range(2)  :<tab>0から2未満までの数列の各要素を順にxとして、繰り返す<EOS>
<SOS>print(sum(list_a[0:3]) + list_b[0])<tab>{{list_aの位置0から位置3までの部分}}の総和にlist_bの最初値を加えた値を出力する<EOS>
<SOS>list_W = []<tab>空列をlist_Wとする<EOS>
<SOS>list_K = []<tab>空列をlist_Kとする<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>sum_W = sum(list_W[0:3])<tab>list_Wの位置0から位置3までの部分の総和をsum_Wとする<EOS>
<SOS>sum_K = sum(list_K[0:3])<tab>list_Kの位置0から位置3までの部分の総和をsum_Kとする<EOS>
<SOS>print(sum_W, sum_K)<tab>sum_Wとsum_Kを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>A = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをAとする<EOS>
<SOS>m = min(A)<tab>Aの最小値をmとする<EOS>
<SOS>M = max(A)<tab>Aの最大値をMとする<EOS>
<SOS>print(math.ceil((m + M) / 2) - m)<tab>math.ceil((m + M) / 2) からmを引いた値を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>if m == 0 and n == 0  :<tab>mが0、かつnが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>List = []<tab>空列をListとする<EOS>
<SOS>max_ans = 0<tab>0をmax_ansとする<EOS>
<SOS>sum_ans = 0<tab>0をsum_ansとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i < m  :<tab>iがmより小さいとき、<EOS>
<SOS>if i >= m - 1 and max_ans < sum_ans  :<tab>iが{{mから1を引いた値}}以上、かつmax_ansがsum_ansより小さいとき、<EOS>
<SOS>max_ans = sum_ans<tab>sum_ansをmax_ansとする<EOS>
<SOS>print(max_ans)<tab>max_ansを出力する<EOS>
<SOS>LIST = []<tab>空列をLISTとする<EOS>
<SOS>for i  in range(10)  :<tab>0から10未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(LIST[0])<tab>LISTの最初値を出力する<EOS>
<SOS>print(LIST[1])<tab>LIST(1)を出力する<EOS>
<SOS>print(LIST[2])<tab>LIST(2)を出力する<EOS>
<SOS>str_org = str(input())<tab>入力された文字列の文字列をstr_orgとする<EOS>
<SOS>print(str_org.upper())<tab>str_orgを英大文字に変換した文字列を出力する<EOS>
<SOS>str = input()<tab>入力された文字列をstrとする<EOS>
<SOS>print(str.swapcase())<tab>strの英大文字を英小文字、英小文字を英大文字に変換した文字列を出力する<EOS>
<SOS>count_char = list(0 for i in range(26))<tab>{{0から26未満までの数列}}の各要素をiとし、0の列のリストをcount_charとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>for i  in range(97, 123)  :<tab>97から123未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(chr(i), ":", count_char[i-97])<tab>文字コードiの文字、":"、count_char({{iから97を引いた値}})を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>num = input()<tab>入力された文字列をnumとする<EOS>
<SOS>if num == '0'  :<tab>numが'0'のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>num_lst = [int(i) for i in num]<tab>numの各要素をiとし、iの整数値の列をnum_lstとする<EOS>
<SOS>print(sum(num_lst))<tab>num_lstの総和を出力する<EOS>
<SOS>a = list(input())<tab>入力された文字列のリストをaとする<EOS>
<SOS>count_K = a.count("K")<tab>a内の"K"の出現をカウントした整数をcount_Kとする<EOS>
<SOS>count_P = a.count("P")<tab>a内の"P"の出現をカウントした整数をcount_Pとする<EOS>
<SOS>count_U = a.count("U")<tab>a内の"U"の出現をカウントした整数をcount_Uとする<EOS>
<SOS>count_C = a.count("C")<tab>a内の"C"の出現をカウントした整数をcount_Cとする<EOS>
<SOS>print(min(count_K, count_P, count_U, count_C))<tab>count_K、count_P、count_U、count_Cの最小値を出力する<EOS>
<SOS>W = input()<tab>入力された文字列をWとする<EOS>
<SOS>n = 0<tab>0をnとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>T = input()<tab>入力された文字列をTとする<EOS>
<SOS>if T== "END_OF_TEXT"  :<tab>Tが"END_OF_TEXT"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>small_T = list(T.split())<tab>Tを空白で分割した列のリストをsmall_Tとする<EOS>
<SOS>for i  in range(len(small_T))  :<tab>0からsmall_Tの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if str.lower(small_T[i]) == str.lower(W)  :<tab>strとsmall_T(i)を英小文字に変換した文字列がstrとWを英小文字に変換した文字列のとき、<EOS>
<SOS>print(n)<tab>nを出力する<EOS>
<SOS>s = list(input())<tab>入力された文字列のリストをsとする<EOS>
<SOS>p = list(input())<tab>入力された文字列のリストをpとする<EOS>
<SOS>for x  in range(len(p))  :<tab>0からpの長さ未満までの数列の各要素を順にxとして、繰り返す<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if p[j] == s[i]  :<tab>p(j)がs(i)のとき、<EOS>
<SOS>if j == len(p)  :<tab>jがpの長さのとき、<EOS>
<SOS>print("Yes")<tab>"Yes"を出力する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if i == len(s)  :<tab>iがsの長さのとき、<EOS>
<SOS>print("No")<tab>"No"を出力する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>a = list(input())<tab>入力された文字列のリストをaとする<EOS>
<SOS>b = list(input())<tab>入力された文字列のリストをbとする<EOS>
<SOS>for j  in range(len(a)+1-len(b))  :<tab>0から{{aの長さに1を加えた値}}からbの長さを引いた値未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>Same = True<tab>真をSameとする<EOS>
<SOS>ans = j<tab>jをansとする<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while i < len(b)  :<tab>iがbの長さより小さい間、繰り返す<EOS>
<SOS>if b[i] == a[j]  :<tab>b(i)がa(j)のとき、<EOS>
<SOS>if Same == True  :<tab>Sameが真のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>Taro_ten = 0<tab>0をTaro_tenとする<EOS>
<SOS>Hanako_ten = 0<tab>0をHanako_tenとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a, b  = list(input().split())<tab>入力された文字列を空白で分割した列のリストを展開し順にaとbとする<EOS>
<SOS>Taro = list(a)<tab>aのリストをTaroとする<EOS>
<SOS>Hanako = list(b)<tab>bのリストをHanakoとする<EOS>
<SOS>length = min(len(Taro), len(Hanako))<tab>Taroの長さとHanakoの長さの最小値をlengthとする<EOS>
<SOS>for i  in range(length)  :<tab>0からlength未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if ord(Taro[i]) > ord(Hanako[i])  :<tab>Taro(i)の順序数がHanako(i)の順序数より大きいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if i == length -1  :<tab>iがlengthから1を引いた値のとき、<EOS>
<SOS>if len(Taro) > length  :<tab>Taroの長さがlengthより大きいとき、<EOS>
<SOS>print(Taro_ten, Hanako_ten)<tab>Taro_tenとHanako_tenを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>score = input()<tab>入力された文字列をscoreとする<EOS>
<SOS>if score == "0"  :<tab>scoreが"0"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>score_a = score.count("A")<tab>score内の"A"の出現をカウントした整数をscore_aとする<EOS>
<SOS>score_b = score.count("B")<tab>score内の"B"の出現をカウントした整数をscore_bとする<EOS>
<SOS>if score[0] == "A"  :<tab>score(0)が"A"のとき、<EOS>
<SOS>if score_a > score_b  :<tab>score_aがscore_bより大きいとき、<EOS>
<SOS>print(score_a, score_b)<tab>score_aとscore_bを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>x1, y1, x2, y2  = map(float, input().split())<tab>map(float,入力された文字列を空白で分割した列)を展開し順にx1、y1、x2、y2とする<EOS>
<SOS>dist = math.sqrt((x1-x2) ** 2 + (y1-y2) ** 2)<tab>math.sqrt((x1-x2) ** 2 + (y1-y2) ** 2)をdistとする<EOS>
<SOS>print("{:.5f}".format(dist))<tab>format(dist)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>a, b, C  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にa、b、Cとする<EOS>
<SOS>S = a * b * math.sin(math.pi * C / 180) / 2<tab>{{aにbを掛けた値}}にmath.sin(math.pi * C / 180) を掛けた値を2で割った値をSとする<EOS>
<SOS>c = math.sqrt(a**2 + b**2 - 2 * a * b * math.cos(math.pi * C / 180))<tab>math.sqrt(a**2 + b**2 - 2 * a * b * math.cos(math.pi * C / 180))をcとする<EOS>
<SOS>L = a + b + c<tab>aにbを加えた値にcを加えた値をLとする<EOS>
<SOS>h = 2 * S / a<tab>2にSを掛けた値をaで割った値をhとする<EOS>
<SOS>print('{:.4f}'.format(S))<tab>format(S)を出力する<EOS>
<SOS>print('{:.4f}'.format(L))<tab>format(L)を出力する<EOS>
<SOS>print('{:.4f}'.format(h))<tab>format(h)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>s = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをsとする<EOS>
<SOS>m = sum(s) / len(s)<tab>sの総和をsの長さで割った値をmとする<EOS>
<SOS>a = 0<tab>0をaとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>a = math.sqrt(a)<tab>math.sqrt(a)をaとする<EOS>
<SOS>print(a)<tab>aを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>m, f, r  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にm、f、rとする<EOS>
<SOS>if m == -1 and f == -1 and r == -1  :<tab>{{mが-1}}、かつ{{fが-1かどうか}}、かつrが-1のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if m == -1 or f == -1  :<tab>mが-1、またはfが-1のとき、<EOS>
<SOS>print("F")<tab>"F"を出力する<EOS>
<SOS>print("A")<tab>"A"を出力する<EOS>
<SOS>print("B")<tab>"B"を出力する<EOS>
<SOS>print("C")<tab>"C"を出力する<EOS>
<SOS>print("C")<tab>"C"を出力する<EOS>
<SOS>print("D")<tab>"D"を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>if n == 0 and m == 0  :<tab>nが0、かつmが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(1, n-1)  :<tab>1からnから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(i+1, n)  :<tab>iに1を加えた値からn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>for k  in range(j+1, n+1)  :<tab>jに1を加えた値からnに1を加えた値未満までの数列の各要素を順にkとして、繰り返す<EOS>
<SOS>if i + j + k == m  :<tab>{{iにjを加えた値}}にkを加えた値がmのとき、<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>card = [[False for i in range(13)] for j in range(4)]<tab>{{0から4未満までの数列}}の各要素をjとし、{{{{0から13未満までの数列}}の各要素をiとし、偽の列}}の列をcardとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>mark, suit  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にmarkとsuitとする<EOS>
<SOS>if mark == "S"  :<tab>markが"S"のとき、<EOS>
<SOS>mark_num = 0<tab>0をmark_numとする<EOS>
<SOS>mark_num = 1<tab>1をmark_numとする<EOS>
<SOS>mark_num = 2<tab>2をmark_numとする<EOS>
<SOS>mark_num = 3<tab>3をmark_numとする<EOS>
<SOS>card[mark_num][int(suit)-1]  = True<tab>真をcard[mark_num][int(suit)-1] にする<EOS>
<SOS>for j  in range(4)  :<tab>0から4未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>for i  in range(13)  :<tab>0から13未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if card[j][i] == False  :<tab>card(j)(i)が偽のとき、<EOS>
<SOS>if j == 0  :<tab>jが0のとき、<EOS>
<SOS>print("S", i+1)<tab>"S"とiに1を加えた値を出力する<EOS>
<SOS>print("H", i+1)<tab>"H"とiに1を加えた値を出力する<EOS>
<SOS>print("C", i+1)<tab>"C"とiに1を加えた値を出力する<EOS>
<SOS>print("D", i+1)<tab>"D"とiに1を加えた値を出力する<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>B = [list(map(int, input().split())) for i in range(n)]<tab>{{0からn未満までの数列}}の各要素をiとし、map(整数,{{input()を空白で分割した列}})のリストの列をBとする<EOS>
<SOS>A = [int(input()) for i in range(m)]<tab>{{0からm未満までの数列}}の各要素をiとし、入力された文字列の整数値の列をAとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for j  in range(m)  :<tab>0からm未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>n, m, l  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にn、m、lとする<EOS>
<SOS>A = [list(map(int, input().split())) for i in range(n)]<tab>{{0からn未満までの数列}}の各要素をiとし、map(整数,{{input()を空白で分割した列}})のリストの列をAとする<EOS>
<SOS>B = [list(map(int, input().split())) for i in range(m)]<tab>{{0からm未満までの数列}}の各要素をiとし、map(整数,{{input()を空白で分割した列}})のリストの列をBとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(l)  :<tab>0からl未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for k  in range(m)  :<tab>0からm未満までの数列の各要素を順にkとして、繰り返す<EOS>
<SOS>if j == l-1  :<tab>jがlから1を引いた値のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>L = []<tab>空列をLとする<EOS>
<SOS>temp = n<tab>nをtempとする<EOS>
<SOS>print(n,end="")<tab>nと((end, ""))からなる辞書を出力する<EOS>
<SOS>print(":",end="")<tab>":"と((end, ""))からなる辞書を出力する<EOS>
<SOS>for i  in range(2, int(n**(1/2)//1)+1) :<tab>2から{{nの(1/2)乗を1で割った商}}の整数値に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if temp%i==0 :<tab>tempをiで割った余りが0のとき、<EOS>
<SOS>c = 0<tab>0をcとする<EOS>
<SOS>while temp%i==0 :<tab>tempをiで割った余りが0の間、繰り返す<EOS>
<SOS>for j  in range(c) :<tab>0からc未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print("",i,end="")<tab>""、i、((end, ""))からなる辞書を出力する<EOS>
<SOS>if temp!=1 :<tab>tempが1と等しくないとき、<EOS>
<SOS>print("",temp, end="")<tab>""、temp、((end, ""))からなる辞書を出力する<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>factorization(n)<tab>factorization(n)<EOS>
<SOS>mod = 1000000007<tab>1000000007をmodとする<EOS>
<SOS>return (x % mod)<tab>(xをmodで割った余り)の組を関数出力とする<EOS>
<SOS>if b == 1  :<tab>bが1のとき、<EOS>
<SOS>return a<tab>aを関数出力とする<EOS>
<SOS>a_2 = S(a**2)<tab>S(aの2乗)をa_2とする<EOS>
<SOS>b_2 = b // 2<tab>bを2で割った商をb_2とする<EOS>
<SOS>return S(A(a_2, b_2, mod))<tab>S(A(a_2,b_2,mod))を関数出力とする<EOS>
<SOS>mod = 1000000007<tab>1000000007をmodとする<EOS>
<SOS>m, n  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にmとnとする<EOS>
<SOS>print(A(m, n, mod))<tab>A(m,n,mod)を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>x, y  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にxとyとする<EOS>
<SOS>if x == 0 and y == 0  :<tab>xが0、かつyが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if y == 0  :<tab>yが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if x < y  :<tab>xがyより小さいとき、<EOS>
<SOS>x, y = y, x<tab>xとyを入れ替える<EOS>
<SOS>x = x % y<tab>xをyで割った余りをxとする<EOS>
<SOS>x, y = y, x<tab>xとyを入れ替える<EOS>
<SOS>print(x, ans)<tab>xとansを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if a < b  :<tab>aがbより小さいとき、<EOS>
<SOS>a, b = b, a<tab>aとbを入れ替える<EOS>
<SOS>amari = a % b<tab>aをbで割った余りをamariとする<EOS>
<SOS>if amari == 0  :<tab>amariが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>return (b)<tab>(b)の組を関数出力とする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>c = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをcとする<EOS>
<SOS>for i  in range(n-1, 0, -1)  :<tab>nから1を引いた値から0未満までの-1間隔の数列の各要素を順にiとして、繰り返す<EOS>
<SOS>c[i-1]  = int(c[i] * c[i-1] / gcd(c[i], c[i-1]))<tab>{{c(i)にc({{iから1を引いた値}})を掛けた値}}をgcd(c(i),c({{iから1を引いた値}}))で割った値の整数値をc[i-1] にする<EOS>
<SOS>print(c[0])<tab>cの最初値を出力する<EOS>
<SOS>N, M  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にNとMとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if N < M  :<tab>NがMより小さいとき、<EOS>
<SOS>N, M = M, N<tab>NとMを入れ替える<EOS>
<SOS>amari = N % M<tab>NをMで割った余りをamariとする<EOS>
<SOS>if amari == 0  :<tab>amariが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(M)<tab>Mを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>for i  in range(2, int(math.sqrt(N))+1)  :<tab>2からmath.sqrt(N)の整数値に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if N % i == 0  :<tab>Nをiで割った余りが0のとき、<EOS>
<SOS>return 'F'<tab>'F'を関数出力とする<EOS>
<SOS>return 'T'<tab>'T'を関数出力とする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for j  in range(n)  :<tab>0からn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>a = int(input())<tab>入力された文字列の整数値をaとする<EOS>
<SOS>if Sosu(a) == 'T'  :<tab>Sosu(a)が'T'のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>for i  in range(3, int(math.sqrt(n))+1, 2)  :<tab>3からmath.sqrt(n)の整数値に1を加えた値未満までの2間隔の数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if n % i == 0  :<tab>nをiで割った余りが0のとき、<EOS>
<SOS>return False<tab>偽を関数出力とする<EOS>
<SOS>return True<tab>真を関数出力とする<EOS>
<SOS>S = [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4]<tab>(0、0、1、2、2、3、3、4、4、4、4)からなる列をSとする<EOS>
<SOS>for i  in range(11, 1000000)  :<tab>11から1000000未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i % 2 == 0  :<tab>iを2で割った余りが0のとき、<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>print(S[n])<tab>S(n)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>for i  in range(2, int(math.sqrt(N))+1)  :<tab>2からmath.sqrt(N)の整数値に1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if N % i == 0  :<tab>Nをiで割った余りが0のとき、<EOS>
<SOS>return False<tab>偽を関数出力とする<EOS>
<SOS>return True<tab>真を関数出力とする<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(2, a)  :<tab>2からa未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if Sosu(i)  :<tab>Sosu(i)のとき、<EOS>
<SOS>other = a - i<tab>aからiを引いた値をotherとする<EOS>
<SOS>if other >= i and Sosu(other)  :<tab>otherがi以上、かつSosu(other)のとき、<EOS>
<SOS>return count<tab>countを関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(main(n))<tab>main(n)を出力する<EOS>
<SOS>if n % 2 == 0  :<tab>nを2で割った余りが0のとき、<EOS>
<SOS>return n // 2<tab>nを2で割った商を関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>while n != 1  :<tab>nが1と等しくない間、繰り返す<EOS>
<SOS>n = Collatz(n)<tab>Collatz(n)をnとする<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>S = 0<tab>0をSとする<EOS>
<SOS>for i  in range(600//d)  :<tab>0から600をdで割った商未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>print(S)<tab>Sを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>q = int(input())<tab>入力された文字列の整数値をqとする<EOS>
<SOS>if q == -1  :<tab>qが-1のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>n = 1<tab>1をnとする<EOS>
<SOS>x = q / 2<tab>qを2で割った値をxとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if abs(x**3 - q) < (0.00001 * q)  :<tab>{{xの3乗からqを引いた値}}の絶対値が({{0.00001にqを掛けた値}})の組より小さいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>x = x - (x**3 - q) / (3 * x**2)<tab>xから({{xの3乗からqを引いた値}})の組を({{3にxの2乗を掛けた値}})の組で割った値を引いた値をxとする<EOS>
<SOS>print('{:.6f}'.format(x))<tab>format(x)を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>a = input()<tab>入力された文字列をaとする<EOS>
<SOS>if a == "END OF INPUT"  :<tab>aが"END OF INPUT"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>b = list(a)<tab>aのリストをbとする<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(len(b))  :<tab>0からbの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if b[i] != ' '  :<tab>b(i)が' 'と等しくないとき、<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>count_j = 0<tab>0をcount_jとする<EOS>
<SOS>count_i = 0<tab>0をcount_iとする<EOS>
<SOS>for i  in range(len(l)-2)  :<tab>'0からlの長さから2を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if l[i] == "J" and l[i+1] == "O" and l[i+2] == "I"  :<tab>{{l(i)が"J"}}、かつ{{l({{iに1を加えた値}})が"O"かどうか}}、かつl({{iに2を加えた値}})が"I"のとき、<EOS>
<SOS>if l[i] == "I" and l[i+1] == "O" and l[i+2] == "I"  :<tab>{{l(i)が"I"}}、かつ{{l({{iに1を加えた値}})が"O"かどうか}}、かつl({{iに2を加えた値}})が"I"のとき、<EOS>
<SOS>return count_j, count_i<tab>(count_jとcount_i)の組を関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>j, i  = JOIOI(l)<tab>JOIOI(l)を展開し順にjとiとする<EOS>
<SOS>print(j)<tab>jを出力する<EOS>
<SOS>print(i)<tab>iを出力する<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>pal = "True"<tab>"True"をpalとする<EOS>
<SOS>for i  in range(len(s)//2)  :<tab>0からsの長さを2で割った商未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if s[i] != s[-i-1]  :<tab>s(i)がs({{-iから1を引いた値}})と等しくないとき、<EOS>
<SOS>pal = "False"<tab>"False"をpalとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if pal == "True"  :<tab>palが"True"のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>sentence = list(input().split())<tab>入力された文字列を空白で分割した列のリストをsentenceとする<EOS>
<SOS>max_length = 0<tab>0をmax_lengthとする<EOS>
<SOS>max_sentence = ""<tab>""をmax_sentenceとする<EOS>
<SOS>count = []<tab>空列をcountとする<EOS>
<SOS>for i  in range(len(sentence))  :<tab>0からsentenceの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if max_length < len(sentence[i])  :<tab>max_lengthがsentence(i)の長さより小さいとき、<EOS>
<SOS>max_length = len(sentence[i])<tab>sentence(i)の長さをmax_lengthとする<EOS>
<SOS>max_sentence = sentence[i]<tab>sentence(i)をmax_sentenceとする<EOS>
<SOS>new_word = False<tab>偽をnew_wordとする<EOS>
<SOS>for j  in range(len(count))  :<tab>0からcountの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if count[j][0] == sentence[i]  :<tab>count(j)(0)がsentence(i)のとき、<EOS>
<SOS>new_word = True<tab>真をnew_wordとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if new_word == False  :<tab>new_wordが偽のとき、<EOS>
<SOS>count = sorted(count, key = itemgetter(1), reverse = True)<tab>countと((key, itemgetter(1))と(reverse, 真))からなる辞書をソートした列をcountとする<EOS>
<SOS>print(count[0][0], max_sentence)<tab>countの最初値の最初値とmax_sentenceを出力する<EOS>
<SOS>A = list(input().split())<tab>入力された文字列を空白で分割した列のリストをAとする<EOS>
<SOS>for i  in range(len(A))  :<tab>0からAの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if "apple" in A[i]  :<tab>"apple"がA(i)に含まれるとき、<EOS>
<SOS>A[i]  = A[i].replace("apple", "peach")<tab>A(i)内の"apple"を"peach"で置き換えた文字列をA[i] にする<EOS>
<SOS>A[i]  = A[i].replace("peach", "apple")<tab>A(i)内の"peach"を"apple"で置き換えた文字列をA[i] にする<EOS>
<SOS>print(" ".join(A))<tab>Aを文字列" "で連結した文字列を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>hit = 0<tab>0をhitとする<EOS>
<SOS>brow = 0<tab>0をbrowとする<EOS>
<SOS>if a1 == b1  :<tab>a1がb1のとき、<EOS>
<SOS>if a2 == b2  :<tab>a2がb2のとき、<EOS>
<SOS>if a3 == b3  :<tab>a3がb3のとき、<EOS>
<SOS>if a4 == b4  :<tab>a4がb4のとき、<EOS>
<SOS>if a1 == b2 or a1 == b3 or a1 == b4  :<tab>{{a1がb2}}、または{{a1がb3かどうか}}、またはa1がb4のとき、<EOS>
<SOS>if a2 == b1 or a2 == b3 or a2 == b4  :<tab>{{a2がb1}}、または{{a2がb3かどうか}}、またはa2がb4のとき、<EOS>
<SOS>if a3 == b1 or a3 == b2 or a3 == b4  :<tab>{{a3がb1}}、または{{a3がb2かどうか}}、またはa3がb4のとき、<EOS>
<SOS>if a4 == b1 or a4 == b2 or a4 == b3  :<tab>{{a4がb1}}、または{{a4がb2かどうか}}、またはa4がb3のとき、<EOS>
<SOS>print(hit, brow)<tab>hitとbrowを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(1, n)  :<tab>1からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>s = 0<tab>0をsとする<EOS>
<SOS>for j  in range(i, n)  :<tab>iからn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if s == n  :<tab>sがnのとき、<EOS>
<SOS>if s > n  :<tab>sがnより大きいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(count)<tab>countを出力する<EOS>
<SOS>ans = []<tab>空列をansとする<EOS>
<SOS>for i  in range(1, s)  :<tab>1からs未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>i_tax = int(i + i*x/100)<tab>iに{{{{iにxを掛けた値}}を100で割った値}}を加えた値の整数値をi_taxとする<EOS>
<SOS>for j  in range(1, s)  :<tab>1からs未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>j_tax = int(j + j*x/100)<tab>jに{{{{jにxを掛けた値}}を100で割った値}}を加えた値の整数値をj_taxとする<EOS>
<SOS>if i_tax + j_tax > s  :<tab>i_taxにj_taxを加えた値がsより大きいとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if i_tax + j_tax == s  :<tab>i_taxにj_taxを加えた値がsのとき、<EOS>
<SOS>return ans<tab>ansを関数出力とする<EOS>
<SOS>ans = int(i + i*y/100) + int(j + j*y/100)<tab>{{iに{{{{iにyを掛けた値}}を100で割った値}}を加えた値}}の整数値に{{jに{{{{jにyを掛けた値}}を100で割った値}}を加えた値}}の整数値を加えた値をansとする<EOS>
<SOS>return ans<tab>ansを関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>x, y, s  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にx、y、sとする<EOS>
<SOS>if x == 0 and y == 0  :<tab>xが0、かつyが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>lst = calc_before(x, s)<tab>calc_before(x,s)をlstとする<EOS>
<SOS>max_price = 0<tab>0をmax_priceとする<EOS>
<SOS>for i  in range(len(lst))  :<tab>0からlstの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>price = calc_after(lst[i][0], lst[i][1], y)<tab>calc_after(lst(i)の最初値,lst(i)(1),y)をpriceとする<EOS>
<SOS>max_price = max(price, max_price)<tab>priceとmax_priceの最大値をmax_priceとする<EOS>
<SOS>print(max_price)<tab>max_priceを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n, m  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとmとする<EOS>
<SOS>if n == 0 and m == 0  :<tab>nが0、かつmが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>catalog = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをcatalogとする<EOS>
<SOS>max_p = 0<tab>0をmax_pとする<EOS>
<SOS>for i  in range(n-1)  :<tab>0からnから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(1, n)  :<tab>1からn未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if i != j  :<tab>iがjと等しくないとき、<EOS>
<SOS>x = catalog[i] + catalog[j]<tab>catalog(i)にcatalog(j)を加えた値をxとする<EOS>
<SOS>if x <= m and x > max_p  :<tab>xがm以下、かつxがmax_pより大きいとき、<EOS>
<SOS>max_p = x<tab>xをmax_pとする<EOS>
<SOS>if max_p == 0  :<tab>max_pが0のとき、<EOS>
<SOS>print("NONE")<tab>"NONE"を出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>lst = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをlstとする<EOS>
<SOS>ave_lst = sum(lst) / len(lst)<tab>lstの総和をlstの長さで割った値をave_lstとする<EOS>
<SOS>Sum = 0<tab>0をSumとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if lst[i] <= ave_lst  :<tab>lst(i)がave_lst以下のとき、<EOS>
<SOS>print(Sum)<tab>Sumを出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>if N == 1  :<tab>Nが1のとき、<EOS>
<SOS>return False<tab>偽を関数出力とする<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for i  in range(a+1, b+1)  :<tab>aに1を加えた値からbに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if Sosu(i)  :<tab>Sosu(i)のとき、<EOS>
<SOS>return ans<tab>ansを関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>if n == 0  :<tab>nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>print(amount_sosu(n, n*2))<tab>amount_sosu(n,{{nに2を掛けた値}})を出力する<EOS>
<SOS>n, t, e  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にn、t、eとする<EOS>
<SOS>watch = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをwatchとする<EOS>
<SOS>ans = False<tab>偽をansとする<EOS>
<SOS>for w  in range(n)  :<tab>0からn未満までの数列の各要素を順にwとして、繰り返す<EOS>
<SOS>for i  in range(e+1)  :<tab>0からeに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if (t+i) % watch[w] == 0  :<tab>({{tにiを加えた値}})の組をwatch(w)で割った余りが0のとき、<EOS>
<SOS>ans = True<tab>真をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if (t-i) % watch[w] == 0  :<tab>({{tからiを引いた値}})の組をwatch(w)で割った余りが0のとき、<EOS>
<SOS>ans = True<tab>真をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if ans == True  :<tab>ansが真のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if ans == True  :<tab>ansが真のとき、<EOS>
<SOS>print(w+1)<tab>wに1を加えた値を出力する<EOS>
<SOS>d, l  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にdとlとする<EOS>
<SOS>s = int(d / l + d % l)<tab>{{dをlで割った値}}に{{dをlで割った余り}}を加えた値の整数値をsとする<EOS>
<SOS>print(s)<tab>sを出力する<EOS>
<SOS>if d == 0  :<tab>dが0のとき、<EOS>
<SOS>new_i = square[n][0] - 1<tab>square(n)(0)から1を引いた値をnew_iとする<EOS>
<SOS>new_j = square[n][1]<tab>square(n)(1)をnew_jとする<EOS>
<SOS>new_i = square[n][0]<tab>square(n)の最初値をnew_iとする<EOS>
<SOS>new_j = square[n][1] - 1<tab>square(n)(1)から1を引いた値をnew_jとする<EOS>
<SOS>new_i = square[n][0] + 1<tab>square(n)(0)に1を加えた値をnew_iとする<EOS>
<SOS>new_j = square[n][1]<tab>square(n)(1)をnew_jとする<EOS>
<SOS>new_i = square[n][0]<tab>square(n)の最初値をnew_iとする<EOS>
<SOS>new_j = square[n][1] + 1<tab>square(n)(1)に1を加えた値をnew_jとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>N = int(input())<tab>入力された文字列の整数値をNとする<EOS>
<SOS>if N == 0  :<tab>Nが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>square = [[0, 0]]<tab>((0と0)からなる列)からなる列をsquareとする<EOS>
<SOS>for i  in range(N-1)  :<tab>0からNから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>n, d  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとdとする<EOS>
<SOS>sort_x_square = sorted(square)<tab>squareをソートした列をsort_x_squareとする<EOS>
<SOS>print(sort_x_square[-1][0] - sort_x_square[0][0]+1, sort_y_square[-1][1] - sort_y_square[0][1]+1)<tab>{{sort_x_squareの末尾値(0)からsort_x_squareの最初値の最初値を引いた値}}に1を加えた値と{{sort_y_squareの末尾値(1)からsort_y_squareの最初値(1)を引いた値}}に1を加えた値を出力する<EOS>
<SOS>new = []<tab>空列をnewとする<EOS>
<SOS>re_a = list(reversed(a))<tab>aを反転した列のリストをre_aとする<EOS>
<SOS>re_b = list(reversed(b))<tab>bを反転した列のリストをre_bとする<EOS>
<SOS>return list(set(new))<tab>newの集合のリストを関数出力とする<EOS>
<SOS>m = int(input())<tab>入力された文字列の整数値をmとする<EOS>
<SOS>for i  in range(m)  :<tab>0からm未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>train = list(input())<tab>入力された文字列のリストをtrainとする<EOS>
<SOS>new_train = []<tab>空列をnew_trainとする<EOS>
<SOS>for j  in range(1, len(train))  :<tab>1からtrainの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>pre_train = train[:j]<tab>trainの位置先頭から位置jまでの部分をpre_trainとする<EOS>
<SOS>bk_train = train[j:]<tab>trainの先頭j個を取り除いた部分をbk_trainとする<EOS>
<SOS>new_train = new_train + rename(pre_train, bk_train)<tab>new_trainにrename(pre_train,bk_train)を加えた値をnew_trainとする<EOS>
<SOS>print(len(list(set(new_train))))<tab>new_trainの集合のリストの長さを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>s = input()<tab>入力された文字列をsとする<EOS>
<SOS>tmp = []<tab>空列をtmpとする<EOS>
<SOS>if s == '.'  :<tab>sが'.'のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>ans = True<tab>真をansとする<EOS>
<SOS>for i  in range(len(s))  :<tab>0からsの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if s[i] == '('  :<tab>s(i)が'('のとき、<EOS>
<SOS>if '(' not in tmp  :<tab>not in('(',tmp)のとき、<EOS>
<SOS>ans = False<tab>偽をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if '[' not in tmp  :<tab>not in('[',tmp)のとき、<EOS>
<SOS>ans = False<tab>偽をansとする<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>elif tmp[-1] == '['  :<tab>("tmp(-1)が'['の",)<EOS>
<SOS>if len(tmp) != 0 or ans == False  :<tab>tmpの長さが0と等しくなく、またはansが偽のとき、<EOS>
<SOS>print('no')<tab>'no'を出力する<EOS>
<SOS>pas = input()<tab>入力された文字列をpasとする<EOS>
<SOS>if len(pas) < 6  :<tab>pasの長さが6より小さいとき、<EOS>
<SOS>print("INVALID")<tab>"INVALID"を出力する<EOS>
<SOS>tmp = 0<tab>0をtmpとする<EOS>
<SOS>for i  in range(11)  :<tab>0から11未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if i <= 4  :<tab>iが4以下のとき、<EOS>
<SOS>tmp = tmp % 11<tab>tmpを11で割った余りをtmpとする<EOS>
<SOS>if tmp <= 1  :<tab>tmpが1以下のとき、<EOS>
<SOS>return 0<tab>0を関数出力とする<EOS>
<SOS>m = list(input())<tab>入力された文字列のリストをmとする<EOS>
<SOS>if m[11] == '?'  :<tab>m(11)が'?'のとき、<EOS>
<SOS>print(CheckDisit(m))<tab>CheckDisit(m)を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>color = [[0, 0, 0], [0, 0, 255], [0, 255, 0], [0, 255, 255], [255, 0, 0], [255, 0, 255], [255, 255, 0], [255, 255, 255]]<tab>((0、0、0)からなる列、(0、0、255)からなる列、(0、255、0)からなる列、(0、255、255)からなる列、(255、0、0)からなる列、(255、0、255)からなる列、(255、255、0)からなる列、(255、255、255)からなる列)からなる列をcolorとする<EOS>
<SOS>color_16 = input()<tab>入力された文字列をcolor_16とする<EOS>
<SOS>if color_16 == "0"  :<tab>color_16が"0"のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>color_R = int(color_16[1] + color_16[2], 16)<tab>16進数文字列color_16(1)にcolor_16(2)を加えた値の整数値をcolor_Rとする<EOS>
<SOS>color_G = int(color_16[3] + color_16[4], 16)<tab>16進数文字列color_16(3)にcolor_16(4)を加えた値の整数値をcolor_Gとする<EOS>
<SOS>color_B = int(color_16[5] + color_16[6], 16)<tab>16進数文字列color_16(5)にcolor_16(6)を加えた値の整数値をcolor_Bとする<EOS>
<SOS>min_d = 500<tab>500をmin_dとする<EOS>
<SOS>for i  in range(8)  :<tab>0から8未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>R = color[i][0]<tab>color(i)の最初値をRとする<EOS>
<SOS>G = color[i][1]<tab>color(i)(1)をGとする<EOS>
<SOS>B = color[i][2]<tab>color(i)(2)をBとする<EOS>
<SOS>d = math.sqrt((R - color_R)**2 + (G - color_G)**2 + (B - color_B)**2)<tab>math.sqrt((R - color_R)**2 + (G - color_G)**2 + (B - color_B)**2)をdとする<EOS>
<SOS>if min_d > d  :<tab>min_dがdより大きいとき、<EOS>
<SOS>min_d = d<tab>dをmin_dとする<EOS>
<SOS>color_num = i<tab>iをcolor_numとする<EOS>
<SOS>if color_num == 0  :<tab>color_numが0のとき、<EOS>
<SOS>print("black")<tab>"black"を出力する<EOS>
<SOS>print("blue")<tab>"blue"を出力する<EOS>
<SOS>print("lime")<tab>"lime"を出力する<EOS>
<SOS>print("aqua")<tab>"aqua"を出力する<EOS>
<SOS>print("red")<tab>"red"を出力する<EOS>
<SOS>print("fuchsia")<tab>"fuchsia"を出力する<EOS>
<SOS>print("yellow")<tab>"yellow"を出力する<EOS>
<SOS>tanni = ['Man', 'Oku', 'Cho', 'Kei', 'Gai', 'Jo', 'Jou', 'Ko', 'Kan', 'Sei',<tab>('Man'、'Oku'、'Cho'、'Kei'、'Gai'、'Jo'、'Jou'、'Ko'、'Kan'、'Sei'、'Sai'、'Gok'、'Ggs'、'Asg'、'Nyt'、'Fks'、'Mts'、'end')からなる列をtanniとする<EOS>
<SOS>', 'Gok', 'Ggs', 'Asg', 'Nyt', 'Fks', 'Mts' , 'end']<tab>, 'Gok', 'Ggs', 'Asg', 'Nyt', 'Fks', 'Mts' , 'end']<EOS><EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>m, n  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にmとnとする<EOS>
<SOS>if m == 0 and n == 0  :<tab>mが0、かつnが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>s = m**n<tab>mのn乗をsとする<EOS>
<SOS>ans = []<tab>空列をansとする<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>s = s // 10**4<tab>sを10の4乗で割った商をsとする<EOS>
<SOS>if s == 0  :<tab>sが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if tanni[i] != 'end'  :<tab>tanni(i)が'end'と等しくないとき、<EOS>
<SOS>switch = False<tab>偽をswitchとする<EOS>
<SOS>for j  in range(len(ans))  :<tab>0からansの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if ans[j] == 0  :<tab>ans(j)が0のとき、<EOS>
<SOS>switch = True<tab>真をswitchとする<EOS>
<SOS>if switch == True  :<tab>switchが真のとき、<EOS>
<SOS>switch = False<tab>偽をswitchとする<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>import math<tab>mathモジュールを用いる<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if siki[j] == '*'  :<tab>siki(j)が'*'のとき、<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) * int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値にsiki({{jに1を加えた値}})の整数値を掛けた値の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>if (int(siki[j-1]) < 0 and int(siki[j+1]) < 0) or (int(siki[j-1]) >= 0 and int(siki[j+1]) >= 0)  :<tab>({{siki[j-1]の整数値が0より小さく}}、かつ{{siki[j+1]の整数値が0より小さいかどうか}})の組、または({{siki[j-1]の整数値が0以上}}、かつ{{siki[j+1]の整数値が0以上かどうか}})の組のとき、<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) // int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値をsiki({{jに1を加えた値}})の整数値で割った商の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>if len(siki) == 1  :<tab>sikiの長さが1のとき、<EOS>
<SOS>return (siki[0])<tab>(sikiの最初値)の組を関数出力とする<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if '+' not in siki and '-' not in siki :<tab>not in('+',siki)、かつnot in('-',siki)のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if siki[j] == '+'  :<tab>siki(j)が'+'のとき、<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) + int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値にsiki({{jに1を加えた値}})の整数値を加えた値の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>siki[j-1]  = str(int(siki[j-1]) - int(siki[j+1]))<tab>siki({{jから1を引いた値}})の整数値からsiki({{jに1を加えた値}})の整数値を引いた値の文字列をsiki[j-1] にする<EOS>
<SOS>del siki[j:j+2]<tab>sikiの位置jから位置jに2を加えた値までの部分を削除する<EOS>
<SOS>if len(siki) == 1  :<tab>sikiの長さが1のとき、<EOS>
<SOS>return (siki[0])<tab>(sikiの最初値)の組を関数出力とする<EOS>
<SOS>siki = calc_zyouzyo(siki)<tab>calc_zyouzyo(siki)をsikiとする<EOS>
<SOS>siki = calc_kagen(siki)<tab>calc_kagen(siki)をsikiとする<EOS>
<SOS>return (siki)<tab>(siki)の組を関数出力とする<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>tmp = list(input())<tab>入力された文字列のリストをtmpとする<EOS>
<SOS>siki = []<tab>空列をsikiとする<EOS>
<SOS>num = ''<tab>''をnumとする<EOS>
<SOS>for j  in range(len(tmp))  :<tab>0からtmpの長さ未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if tmp[j] in ['*', '/', '+', '-', '(', ')', '=']  :<tab>tmp(j)が('*'、'/'、'+'、'-'、'('、')'、'=')からなる列に含まれるとき、<EOS>
<SOS>if num != ''  :<tab>numが''と等しくないとき、<EOS>
<SOS>num = ''<tab>''をnumとする<EOS>
<SOS>siki.remove('=')<tab>sikiから'='を取り除いた集まり<EOS>
<SOS>j = 0<tab>0をjとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if j == len(siki) or ')' not in siki :<tab>jがsikiの長さ、またはnot in(')',siki)のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>stack = []<tab>空列をstackとする<EOS>
<SOS>if siki[j] == ')'  :<tab>siki(j)が')'のとき、<EOS>
<SOS>for k  in range(j-1,-1, -1)  :<tab>jから1を引いた値から-1未満までの-1間隔の数列の各要素を順にkとして、繰り返す<EOS>
<SOS>if siki[k] == '('  :<tab>siki(k)が'('のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>siki[k]  = calc(stack)<tab>calc(stack)をsiki[k] にする<EOS>
<SOS>del siki[k+1 : j+1]<tab>sikiの位置kに1を加えた値から位置jに1を加えた値までの部分を削除する<EOS>
<SOS>j = k+1<tab>kに1を加えた値をjとする<EOS>
<SOS>siki = calc(siki)<tab>calc(siki)をsikiとする<EOS>
<SOS>print(siki)<tab>sikiを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>i = 0<tab>0をiとする<EOS>
<SOS>while i < len(s)  :<tab>iがsの長さより小さい間、繰り返す<EOS>
<SOS>if s[i] == "@"  :<tab>s(i)が"@"のとき、<EOS>
<SOS>for j  in range(int(s[i+1]))  :<tab>0からs({{iに1を加えた値}})の整数値未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>print()<tab>空行を出力する<EOS>
<SOS>H, A, B  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にH、A、Bとする<EOS>
<SOS>ans = 0<tab>0をansとする<EOS>
<SOS>for i  in range(A, B+1)  :<tab>AからBに1を加えた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if H % i == 0  :<tab>Hをiで割った余りが0のとき、<EOS>
<SOS>print(ans)<tab>ansを出力する<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>cnt = 0<tab>0をcntとする<EOS>
<SOS>for a  in range(10)  :<tab>0から10未満までの数列の各要素を順にaとして、繰り返す<EOS>
<SOS>for b  in range(10)  :<tab>0から10未満までの数列の各要素を順にbとして、繰り返す<EOS>
<SOS>for c  in range(10)  :<tab>0から10未満までの数列の各要素を順にcとして、繰り返す<EOS>
<SOS>for d  in range(10)  :<tab>0から10未満までの数列の各要素を順にdとして、繰り返す<EOS>
<SOS>if a + b + c + d == n  :<tab>{{{{aにbを加えた値}}にcを加えた値}}にdを加えた値がnのとき、<EOS>
<SOS>print(cnt)<tab>cntを出力する<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>v = int(input())<tab>入力された文字列の整数値をvとする<EOS>
<SOS>maxv = v<tab>vをmaxvとする<EOS>
<SOS>minv = v<tab>vをminvとする<EOS>
<SOS>rieki = -(10**9)<tab>-(10の9乗)の組をriekiとする<EOS>
<SOS>for i  in range(n-1)  :<tab>0からnから1を引いた値未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>v = int(input())<tab>入力された文字列の整数値をvとする<EOS>
<SOS>if rieki < v - minv  :<tab>riekiがvからminvを引いた値より小さいとき、<EOS>
<SOS>rieki = v - minv<tab>vからminvを引いた値をriekiとする<EOS>
<SOS>if minv > v  :<tab>minvがvより大きいとき、<EOS>
<SOS>minv = v<tab>vをminvとする<EOS>
<SOS>print(rieki)<tab>riekiを出力する<EOS>
<SOS>stack = []<tab>空列をstackとする<EOS>
<SOS>lst = input().split()<tab>入力された文字列を空白で分割した列をlstとする<EOS>
<SOS>for i  in range(len(lst))  :<tab>0からlstの長さ未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if lst[i] in ['+', '-', '*', '/']  :<tab>lst(i)が('+'、'-'、'*'、'/')からなる列に含まれるとき、<EOS>
<SOS>if lst[i] == '+'  :<tab>lst(i)が'+'のとき、<EOS>
<SOS>print(stack[0])<tab>stackの最初値を出力する<EOS>
<SOS>n, q  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にnとqとする<EOS>
<SOS>process = []<tab>空列をprocessとする<EOS>
<SOS>for i  in range(n)  :<tab>0からn未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>name, time  = input().split()<tab>入力された文字列を空白で分割した列を展開し順にnameとtimeとする<EOS>
<SOS>time = 0<tab>0をtimeとする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>if len(process) == 0  :<tab>processの長さが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>if process[0][1] > q  :<tab>processの最初値(1)がqより大きいとき、<EOS>
<SOS>n = int(input())<tab>入力された文字列の整数値をnとする<EOS>
<SOS>S = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをSとする<EOS>
<SOS>q = int(input())<tab>入力された文字列の整数値をqとする<EOS>
<SOS>T = list(map(int, input().split()))<tab>map(整数,{{入力された文字列を空白で分割した列}})のリストをTとする<EOS>
<SOS>cnt = 0<tab>0をcntとする<EOS>
<SOS>for i  in range(q)  :<tab>0からq未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>if T[i] in S  :<tab>T(i)がSに含まれるとき、<EOS>
<SOS>print(cnt)<tab>cntを出力する<EOS>
<SOS>if j-1 >= 0  :<tab>jから1を引いた値が0以上のとき、<EOS>
<SOS>if A[i][j-1] == "."  :<tab>A(i)({{jから1を引いた値}})が"."のとき、<EOS>
<SOS>A[i][j-1]  = "+"<tab>"+"をA[i][j-1] にする<EOS>
<SOS>Check(A, i, j-1, W, H)<tab>Check(A,i,jから1を引いた値,W,H)<EOS>
<SOS>if i+1 < H  :<tab>iに1を加えた値がHより小さいとき、<EOS>
<SOS>if A[i+1][j] == "."  :<tab>A({{iに1を加えた値}})(j)が"."のとき、<EOS>
<SOS>A[i+1][j] = "+"<tab>"+"をA[i+1][j]にする<EOS>
<SOS>Check(A, i+1, j, W, H)<tab>Check(A,iに1を加えた値,j,W,H)<EOS>
<SOS>if j+1 < W  :<tab>jに1を加えた値がWより小さいとき、<EOS>
<SOS>if A[i][j+1] == "."  :<tab>A(i)({{jに1を加えた値}})が"."のとき、<EOS>
<SOS>A[i][j+1]  = "+"<tab>"+"をA[i][j+1] にする<EOS>
<SOS>Check(A, i, j+1, W, H)<tab>Check(A,i,jに1を加えた値,W,H)<EOS>
<SOS>if i-1 >= 0  :<tab>iから1を引いた値が0以上のとき、<EOS>
<SOS>if A[i-1][j] == "."  :<tab>A({{iから1を引いた値}})(j)が"."のとき、<EOS>
<SOS>A[i-1][j]  = "+"<tab>"+"をA[i-1][j] にする<EOS>
<SOS>Check(A, i-1, j, W, H)<tab>Check(A,iから1を引いた値,j,W,H)<EOS>
<SOS>return (A)<tab>(A)の組を関数出力とする<EOS>
<SOS>while True :<tab>真の間、繰り返す<EOS>
<SOS>W, H  = map(int, input().split())<tab>map(整数,入力された文字列を空白で分割した列)を展開し順にWとHとする<EOS>
<SOS>if W == 0 and H == 0  :<tab>Wが0、かつHが0のとき、<EOS>
<SOS>break<tab>繰り返すのを中断する<EOS>
<SOS>Tile = [list(input()) for i in range(H)]<tab>{{0からH未満までの数列}}の各要素をiとし、入力された文字列のリストの列をTileとする<EOS>
<SOS>for i  in range(H)  :<tab>0からH未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(W)  :<tab>0からW未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if Tile[i][j] == "@"  :<tab>Tile(i)(j)が"@"のとき、<EOS>
<SOS>my_i = i<tab>iをmy_iとする<EOS>
<SOS>my_j = j<tab>jをmy_jとする<EOS>
<SOS>Tile[my_i][my_j]  = "+"<tab>"+"をTile[my_i][my_j] にする<EOS>
<SOS>count = 0<tab>0をcountとする<EOS>
<SOS>for i  in range(H)  :<tab>0からH未満までの数列の各要素を順にiとして、繰り返す<EOS>
<SOS>for j  in range(W)  :<tab>0からW未満までの数列の各要素を順にjとして、繰り返す<EOS>
<SOS>if Tile_new[i][j] == "+"  :<tab>Tile_new(i)(j)が"+"のとき、<EOS>
<SOS>print(count<tab>countを出力する<EOS>
